import \"jsr:@supabase/functions-js/edge-runtime.d.ts\"\nimport { createClient } from 'jsr:@supabase/supabase-js@2'\nimport { corsHeaders } from '../_shared/cors.ts'\nimport { generateSKRPDF } from './skr-template.ts'\nimport { generateInvoicePDF } from './invoice-template.ts'\nimport { generateReceiptPDF } from './receipt-template.ts'\nimport { generateCreditNotePDF } from './credit-note-template.ts'\n\ninterface PDFRequest {\n  type: 'skr' | 'invoice' | 'receipt' | 'credit_note'\n  id: string\n  options?: {\n    includeQR?: boolean\n    includeSignature?: boolean\n    watermark?: string\n  }\n}\n\nDeno.serve(async (req: Request) => {\n  // Handle CORS preflight requests\n  if (req.method === 'OPTIONS') {\n    return new Response('ok', { headers: corsHeaders })\n  }\n\n  try {\n    // Verify request method\n    if (req.method !== 'POST') {\n      return new Response(\n        JSON.stringify({ error: 'Method not allowed' }),\n        { \n          status: 405, \n          headers: { ...corsHeaders, 'Content-Type': 'application/json' } \n        }\n      )\n    }\n\n    // Parse request body\n    const { type, id, options = {} }: PDFRequest = await req.json()\n\n    if (!type || !id) {\n      return new Response(\n        JSON.stringify({ error: 'Missing required fields: type and id' }),\n        { \n          status: 400, \n          headers: { ...corsHeaders, 'Content-Type': 'application/json' } \n        }\n      )\n    }\n\n    // Initialize Supabase client\n    const supabaseUrl = Deno.env.get('SUPABASE_URL')!\n    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!\n    \n    const supabase = createClient(supabaseUrl, supabaseServiceKey)\n\n    let pdfBuffer: Uint8Array\n    let filename: string\n\n    // Generate PDF based on type\n    switch (type) {\n      case 'skr':\n        const skrResult = await generateSKRPDF(supabase, id, options)\n        pdfBuffer = skrResult.buffer\n        filename = skrResult.filename\n        break\n        \n      case 'invoice':\n        const invoiceResult = await generateInvoicePDF(supabase, id, options)\n        pdfBuffer = invoiceResult.buffer\n        filename = invoiceResult.filename\n        break\n        \n      case 'receipt':\n        const receiptResult = await generateReceiptPDF(supabase, id, options)\n        pdfBuffer = receiptResult.buffer\n        filename = receiptResult.filename\n        break\n        \n      case 'credit_note':\n        const creditNoteResult = await generateCreditNotePDF(supabase, id, options)\n        pdfBuffer = creditNoteResult.buffer\n        filename = creditNoteResult.filename\n        break\n        \n      default:\n        return new Response(\n          JSON.stringify({ error: 'Invalid document type' }),\n          { \n            status: 400, \n            headers: { ...corsHeaders, 'Content-Type': 'application/json' } \n          }\n        )\n    }\n\n    // Upload PDF to Supabase Storage\n    const storagePath = `pdfs/${type}s/${filename}`\n    \n    const { data: uploadData, error: uploadError } = await supabase.storage\n      .from('documents')\n      .upload(storagePath, pdfBuffer, {\n        contentType: 'application/pdf',\n        upsert: true\n      })\n\n    if (uploadError) {\n      console.error('Storage upload error:', uploadError)\n      return new Response(\n        JSON.stringify({ error: 'Failed to store PDF' }),\n        { \n          status: 500, \n          headers: { ...corsHeaders, 'Content-Type': 'application/json' } \n        }\n      )\n    }\n\n    // Get public URL\n    const { data: urlData } = supabase.storage\n      .from('documents')\n      .getPublicUrl(storagePath)\n\n    // Update document record with PDF URL\n    const tableName = type === 'credit_note' ? 'credit_notes' : `${type}s`\n    const updateField = 'pdf_url'\n    \n    const { error: updateError } = await supabase\n      .from(tableName)\n      .update({ [updateField]: urlData.publicUrl })\n      .eq('id', id)\n\n    if (updateError) {\n      console.error('Database update error:', updateError)\n      // Don't fail the request if we can't update the database\n    }\n\n    // Return success response\n    return new Response(\n      JSON.stringify({\n        success: true,\n        pdf_url: urlData.publicUrl,\n        filename: filename,\n        storage_path: storagePath\n      }),\n      {\n        status: 200,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n      }\n    )\n\n  } catch (error) {\n    console.error('PDF generation error:', error)\n    \n    return new Response(\n      JSON.stringify({ \n        error: 'Internal server error',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      }),\n      { \n        status: 500, \n        headers: { ...corsHeaders, 'Content-Type': 'application/json' } \n      }\n    )\n  }\n})"