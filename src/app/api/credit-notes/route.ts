import { NextRequest, NextResponse } from 'next/server'\nimport { createClient } from '@/lib/supabase/server'\nimport { authServer } from '@/lib/auth'\nimport { creditNoteFormSchema, financialFiltersSchema } from '@/lib/validations/financial'\nimport { financialUtils } from '@/lib/financial-utils'\n\nexport async function GET(request: NextRequest) {\n  try {\n    // Require permission to view credit notes\n    const user = await authServer.requireRole(['admin', 'finance', 'operations', 'compliance'])\n    \n    const supabase = createClient()\n    const { searchParams } = new URL(request.url)\n    \n    // Parse and validate filters\n    const filters = financialFiltersSchema.parse({\n      search: searchParams.get('search') || undefined,\n      client_id: searchParams.get('client_id') || undefined,\n      date_from: searchParams.get('date_from') || undefined,\n      date_to: searchParams.get('date_to') || undefined,\n      amount_min: searchParams.get('amount_min') ? parseFloat(searchParams.get('amount_min')!) : undefined,\n      amount_max: searchParams.get('amount_max') ? parseFloat(searchParams.get('amount_max')!) : undefined,\n      currency: searchParams.get('currency') || undefined,\n      page: parseInt(searchParams.get('page') || '1'),\n      limit: parseInt(searchParams.get('limit') || '10')\n    })\n    \n    const offset = (filters.page - 1) * filters.limit\n    \n    let query = supabase\n      .from('credit_notes')\n      .select(`\n        *,\n        client:clients(*),\n        invoice:invoices(\n          id,\n          invoice_number,\n          amount,\n          status,\n          skr:skrs(id, skr_number)\n        )\n      `, { count: 'exact' })\n      .order('created_at', { ascending: false })\n    \n    // Apply filters\n    if (filters.search) {\n      query = query.or(`credit_note_number.ilike.%${filters.search}%,description.ilike.%${filters.search}%`)\n    }\n    \n    if (filters.client_id) {\n      query = query.eq('client_id', filters.client_id)\n    }\n    \n    if (filters.date_from) {\n      query = query.gte('created_at', filters.date_from)\n    }\n    \n    if (filters.date_to) {\n      query = query.lte('created_at', filters.date_to)\n    }\n    \n    if (filters.amount_min) {\n      query = query.gte('amount', filters.amount_min)\n    }\n    \n    if (filters.amount_max) {\n      query = query.lte('amount', filters.amount_max)\n    }\n    \n    if (filters.currency) {\n      query = query.eq('currency', filters.currency)\n    }\n    \n    const { data, error, count } = await query\n      .range(offset, offset + filters.limit - 1)\n    \n    if (error) {\n      return NextResponse.json({ error: error.message }, { status: 400 })\n    }\n    \n    return NextResponse.json({\n      data,\n      count,\n      page: filters.page,\n      limit: filters.limit,\n      total_pages: Math.ceil((count || 0) / filters.limit)\n    })\n  } catch (error) {\n    return NextResponse.json(\n      { error: error instanceof Error ? error.message : 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    // Require permission to create credit notes\n    const user = await authServer.requireRole(['admin', 'finance'])\n    \n    const body = await request.json()\n    \n    // Validate request body\n    const validatedData = creditNoteFormSchema.parse(body)\n    \n    const supabase = createClient()\n    \n    // Generate credit note number\n    const creditNoteNumber = financialUtils.generateCreditNoteNumber()\n    \n    // Verify invoice exists and is accessible\n    const { data: invoice, error: invoiceError } = await supabase\n      .from('invoices')\n      .select('id, invoice_number, amount, currency, status, client_id')\n      .eq('id', validatedData.invoice_id)\n      .single()\n    \n    if (invoiceError || !invoice) {\n      return NextResponse.json({ error: 'Invoice not found or not accessible' }, { status: 400 })\n    }\n    \n    // Verify client matches\n    if (invoice.client_id !== validatedData.client_id) {\n      return NextResponse.json({ error: 'Client does not match invoice client' }, { status: 400 })\n    }\n    \n    // Check if invoice can receive credit notes\n    if (invoice.status === 'cancelled') {\n      return NextResponse.json({ error: 'Cannot create credit note for cancelled invoice' }, { status: 400 })\n    }\n    \n    // Verify currency matches\n    if (invoice.currency !== validatedData.currency) {\n      return NextResponse.json({ error: 'Currency must match invoice currency' }, { status: 400 })\n    }\n    \n    // Check existing credit notes\n    const { data: existingCreditNotes, error: creditNotesError } = await supabase\n      .from('credit_notes')\n      .select('amount')\n      .eq('invoice_id', validatedData.invoice_id)\n      .eq('status', 'applied')\n    \n    if (creditNotesError) {\n      return NextResponse.json({ error: creditNotesError.message }, { status: 400 })\n    }\n    \n    const totalCredited = existingCreditNotes.reduce((sum, cn) => sum + cn.amount, 0)\n    const maxCreditAmount = invoice.amount - totalCredited\n    \n    if (validatedData.amount > maxCreditAmount) {\n      return NextResponse.json(\n        { error: `Credit amount exceeds maximum creditable amount of ${maxCreditAmount.toFixed(2)}` },\n        { status: 400 }\n      )\n    }\n    \n    // Validate items if provided\n    if (validatedData.items) {\n      const itemErrors = financialUtils.validateInvoiceItems(validatedData.items)\n      if (itemErrors.length > 0) {\n        return NextResponse.json({ error: 'Invalid items', details: itemErrors }, { status: 400 })\n      }\n    }\n    \n    // Create credit note\n    const { data, error } = await supabase\n      .from('credit_notes')\n      .insert({\n        credit_note_number: creditNoteNumber,\n        invoice_id: validatedData.invoice_id,\n        client_id: validatedData.client_id,\n        amount: validatedData.amount,\n        currency: validatedData.currency,\n        reason: validatedData.reason,\n        description: validatedData.description,\n        items: validatedData.items,\n        status: 'draft',\n        notes: validatedData.notes,\n        metadata: validatedData.metadata || {}\n      })\n      .select(`\n        *,\n        client:clients(*),\n        invoice:invoices(\n          id,\n          invoice_number,\n          amount,\n          skr:skrs(id, skr_number)\n        )\n      `)\n      .single()\n    \n    if (error) {\n      return NextResponse.json({ error: error.message }, { status: 400 })\n    }\n    \n    return NextResponse.json({ data }, { status: 201 })\n  } catch (error) {\n    if (error instanceof Error && error.name === 'ZodError') {\n      return NextResponse.json(\n        { error: 'Validation error', details: (error as any).errors },\n        { status: 400 }\n      )\n    }\n    \n    return NextResponse.json(\n      { error: error instanceof Error ? error.message : 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}"