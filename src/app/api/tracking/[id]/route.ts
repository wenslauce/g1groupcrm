import { NextRequest, NextResponse } from 'next/server'\nimport { createClient } from '@/lib/supabase/server'\nimport { authServer } from '@/lib/auth'\nimport { trackingUpdateSchema } from '@/lib/validations/tracking'\nimport { trackingUtils } from '@/lib/tracking-utils'\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    // Require permission to view tracking data\n    const user = await authServer.requireRole(['admin', 'finance', 'operations', 'compliance'])\n    \n    const supabase = createClient()\n    \n    const { data, error } = await supabase\n      .from('tracking')\n      .select(`\n        *,\n        skr:skrs(\n          id,\n          skr_number,\n          status,\n          client:clients(id, name),\n          asset:assets(id, asset_name, asset_type)\n        ),\n        recorded_by_user:user_profiles!recorded_by(id, name)\n      `)\n      .eq('id', params.id)\n      .single()\n    \n    if (error) {\n      if (error.code === 'PGRST116') {\n        return NextResponse.json({ error: 'Tracking record not found' }, { status: 404 })\n      }\n      return NextResponse.json({ error: error.message }, { status: 400 })\n    }\n    \n    return NextResponse.json({ data })\n  } catch (error) {\n    return NextResponse.json(\n      { error: error instanceof Error ? error.message : 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    // Require permission to update tracking records\n    const user = await authServer.requireRole(['admin', 'finance', 'operations'])\n    \n    const body = await request.json()\n    \n    // Validate request body\n    const validatedData = trackingUpdateSchema.parse(body)\n    \n    const supabase = createClient()\n    \n    // Get current tracking record\n    const { data: currentRecord, error: fetchError } = await supabase\n      .from('tracking')\n      .select('*')\n      .eq('id', params.id)\n      .single()\n    \n    if (fetchError || !currentRecord) {\n      return NextResponse.json({ error: 'Tracking record not found' }, { status: 404 })\n    }\n    \n    // Validate coordinates if provided\n    if (validatedData.latitude !== undefined && validatedData.longitude !== undefined) {\n      if (!trackingUtils.validateCoordinates(validatedData.latitude, validatedData.longitude)) {\n        return NextResponse.json({ error: 'Invalid coordinates provided' }, { status: 400 })\n      }\n    }\n    \n    const { data, error } = await supabase\n      .from('tracking')\n      .update({\n        ...validatedData,\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', params.id)\n      .select(`\n        *,\n        skr:skrs(\n          id,\n          skr_number,\n          status,\n          client:clients(id, name),\n          asset:assets(id, asset_name)\n        ),\n        recorded_by_user:user_profiles!recorded_by(id, name)\n      `)\n      .single()\n    \n    if (error) {\n      return NextResponse.json({ error: error.message }, { status: 400 })\n    }\n    \n    return NextResponse.json({ data })\n  } catch (error) {\n    if (error instanceof Error && error.name === 'ZodError') {\n      return NextResponse.json(\n        { error: 'Validation error', details: (error as any).errors },\n        { status: 400 }\n      )\n    }\n    \n    return NextResponse.json(\n      { error: error instanceof Error ? error.message : 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    // Require admin permission to delete tracking records\n    const user = await authServer.requireRole(['admin'])\n    \n    const supabase = createClient()\n    \n    const { error } = await supabase\n      .from('tracking')\n      .delete()\n      .eq('id', params.id)\n    \n    if (error) {\n      return NextResponse.json({ error: error.message }, { status: 400 })\n    }\n    \n    return NextResponse.json({ message: 'Tracking record deleted successfully' })\n  } catch (error) {\n    return NextResponse.json(\n      { error: error instanceof Error ? error.message : 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}"