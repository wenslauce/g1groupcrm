import { NextRequest, NextResponse } from 'next/server'\nimport { createClient } from '@/lib/supabase/server'\nimport { authServer } from '@/lib/auth'\nimport { locationUpdateSchema } from '@/lib/validations/tracking'\nimport { trackingUtils } from '@/lib/tracking-utils'\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    // Require permission to view tracking data\n    const user = await authServer.requireRole(['admin', 'finance', 'operations', 'compliance'])\n    \n    const supabase = createClient()\n    \n    // Get all tracking records for this SKR\n    const { data, error } = await supabase\n      .from('tracking')\n      .select(`\n        *,\n        recorded_by_user:user_profiles!recorded_by(id, name)\n      `)\n      .eq('skr_id', params.id)\n      .order('created_at', { ascending: false })\n    \n    if (error) {\n      return NextResponse.json({ error: error.message }, { status: 400 })\n    }\n    \n    // Format tracking history with additional metadata\n    const formattedHistory = trackingUtils.formatTrackingHistory(data)\n    \n    return NextResponse.json({ data: formattedHistory })\n  } catch (error) {\n    return NextResponse.json(\n      { error: error instanceof Error ? error.message : 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function POST(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    // Require permission to update tracking\n    const user = await authServer.requireRole(['admin', 'finance', 'operations'])\n    \n    const body = await request.json()\n    \n    // Validate request body\n    const validatedData = locationUpdateSchema.parse({\n      ...body,\n      skr_id: params.id\n    })\n    \n    const supabase = createClient()\n    \n    // Verify SKR exists and is accessible\n    const { data: skr, error: skrError } = await supabase\n      .from('skrs')\n      .select('id, skr_number, status')\n      .eq('id', params.id)\n      .single()\n    \n    if (skrError || !skr) {\n      return NextResponse.json({ error: 'SKR not found or not accessible' }, { status: 400 })\n    }\n    \n    // Validate coordinates if provided\n    if (validatedData.latitude !== undefined && validatedData.longitude !== undefined) {\n      if (!trackingUtils.validateCoordinates(validatedData.latitude, validatedData.longitude)) {\n        return NextResponse.json({ error: 'Invalid coordinates provided' }, { status: 400 })\n      }\n    }\n    \n    // Determine tracking status based on SKR status\n    const trackingStatus = trackingUtils.getTrackingStatusFromSKRStatus(skr.status)\n    \n    // Create tracking record\n    const { data, error } = await supabase\n      .from('tracking')\n      .insert({\n        skr_id: validatedData.skr_id,\n        location: validatedData.location,\n        latitude: validatedData.latitude,\n        longitude: validatedData.longitude,\n        status: trackingStatus,\n        notes: validatedData.notes,\n        recorded_by: user.id,\n        metadata: {}\n      })\n      .select(`\n        *,\n        recorded_by_user:user_profiles!recorded_by(id, name)\n      `)\n      .single()\n    \n    if (error) {\n      return NextResponse.json({ error: error.message }, { status: 400 })\n    }\n    \n    return NextResponse.json({ data }, { status: 201 })\n  } catch (error) {\n    if (error instanceof Error && error.name === 'ZodError') {\n      return NextResponse.json(\n        { error: 'Validation error', details: (error as any).errors },\n        { status: 400 }\n      )\n    }\n    \n    return NextResponse.json(\n      { error: error instanceof Error ? error.message : 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}"