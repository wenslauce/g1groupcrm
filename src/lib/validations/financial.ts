import { z } from 'zod'\n\n// Invoice Schemas\nexport const invoiceItemSchema = z.object({\n  description: z.string().min(1, 'Description is required').max(255, 'Description is too long'),\n  quantity: z.number().min(0.01, 'Quantity must be greater than 0'),\n  unit_price: z.number().min(0, 'Unit price cannot be negative'),\n  total: z.number().min(0, 'Total cannot be negative')\n})\n\nexport const invoiceFormSchema = z.object({\n  client_id: z.string().uuid('Invalid client ID'),\n  skr_id: z.string().uuid('Invalid SKR ID').optional(),\n  invoice_number: z.string().optional(),\n  amount: z.number().min(0.01, 'Amount must be greater than 0'),\n  currency: z.string().min(3, 'Currency code is required').max(3, 'Invalid currency code').default('USD'),\n  due_date: z.string().datetime().optional(),\n  description: z.string().optional(),\n  items: z.array(invoiceItemSchema).min(1, 'At least one item is required'),\n  tax_rate: z.number().min(0).max(1).default(0),\n  discount_amount: z.number().min(0).default(0),\n  notes: z.string().optional(),\n  metadata: z.record(z.any()).optional()\n})\n\nexport const invoiceUpdateSchema = z.object({\n  client_id: z.string().uuid('Invalid client ID').optional(),\n  skr_id: z.string().uuid('Invalid SKR ID').optional(),\n  amount: z.number().min(0.01, 'Amount must be greater than 0').optional(),\n  currency: z.string().min(3, 'Currency code is required').max(3, 'Invalid currency code').optional(),\n  due_date: z.string().datetime().optional(),\n  description: z.string().optional(),\n  items: z.array(invoiceItemSchema).optional(),\n  tax_rate: z.number().min(0).max(1).optional(),\n  discount_amount: z.number().min(0).optional(),\n  notes: z.string().optional(),\n  status: z.enum(['draft', 'sent', 'paid', 'overdue', 'cancelled']).optional(),\n  metadata: z.record(z.any()).optional()\n})\n\nexport const invoiceFiltersSchema = z.object({\n  search: z.string().optional(),\n  status: z.enum(['draft', 'sent', 'paid', 'overdue', 'cancelled']).optional(),\n  client_id: z.string().uuid().optional(),\n  skr_id: z.string().uuid().optional(),\n  date_from: z.string().datetime().optional(),\n  date_to: z.string().datetime().optional(),\n  amount_min: z.number().min(0).optional(),\n  amount_max: z.number().min(0).optional(),\n  page: z.number().min(1).default(1),\n  limit: z.number().min(1).max(100).default(10)\n})\n\n// Receipt Schemas\nexport const receiptFormSchema = z.object({\n  invoice_id: z.string().uuid('Invalid invoice ID'),\n  client_id: z.string().uuid('Invalid client ID'),\n  receipt_number: z.string().optional(),\n  amount: z.number().min(0.01, 'Amount must be greater than 0'),\n  currency: z.string().min(3, 'Currency code is required').max(3, 'Invalid currency code').default('USD'),\n  payment_method: z.enum(['cash', 'bank_transfer', 'credit_card', 'debit_card', 'check', 'crypto', 'other']),\n  payment_reference: z.string().optional(),\n  payment_date: z.string().datetime().optional(),\n  notes: z.string().optional(),\n  metadata: z.record(z.any()).optional()\n})\n\nexport const receiptUpdateSchema = z.object({\n  amount: z.number().min(0.01, 'Amount must be greater than 0').optional(),\n  currency: z.string().min(3, 'Currency code is required').max(3, 'Invalid currency code').optional(),\n  payment_method: z.enum(['cash', 'bank_transfer', 'credit_card', 'debit_card', 'check', 'crypto', 'other']).optional(),\n  payment_reference: z.string().optional(),\n  payment_date: z.string().datetime().optional(),\n  notes: z.string().optional(),\n  metadata: z.record(z.any()).optional()\n})\n\n// Credit Note Schemas\nexport const creditNoteFormSchema = z.object({\n  invoice_id: z.string().uuid('Invalid invoice ID'),\n  client_id: z.string().uuid('Invalid client ID'),\n  credit_note_number: z.string().optional(),\n  amount: z.number().min(0.01, 'Amount must be greater than 0'),\n  currency: z.string().min(3, 'Currency code is required').max(3, 'Invalid currency code').default('USD'),\n  reason: z.enum(['return', 'discount', 'error', 'cancellation', 'other']),\n  description: z.string().min(1, 'Description is required'),\n  items: z.array(invoiceItemSchema).optional(),\n  notes: z.string().optional(),\n  metadata: z.record(z.any()).optional()\n})\n\nexport const creditNoteUpdateSchema = z.object({\n  amount: z.number().min(0.01, 'Amount must be greater than 0').optional(),\n  currency: z.string().min(3, 'Currency code is required').max(3, 'Invalid currency code').optional(),\n  reason: z.enum(['return', 'discount', 'error', 'cancellation', 'other']).optional(),\n  description: z.string().optional(),\n  items: z.array(invoiceItemSchema).optional(),\n  notes: z.string().optional(),\n  status: z.enum(['draft', 'issued', 'applied']).optional(),\n  metadata: z.record(z.any()).optional()\n})\n\n// Financial Filters\nexport const financialFiltersSchema = z.object({\n  search: z.string().optional(),\n  client_id: z.string().uuid().optional(),\n  date_from: z.string().datetime().optional(),\n  date_to: z.string().datetime().optional(),\n  amount_min: z.number().min(0).optional(),\n  amount_max: z.number().min(0).optional(),\n  currency: z.string().optional(),\n  page: z.number().min(1).default(1),\n  limit: z.number().min(1).max(100).default(10)\n})\n\n// Export types\nexport type InvoiceItem = z.infer<typeof invoiceItemSchema>\nexport type InvoiceFormData = z.infer<typeof invoiceFormSchema>\nexport type InvoiceUpdateData = z.infer<typeof invoiceUpdateSchema>\nexport type InvoiceFilters = z.infer<typeof invoiceFiltersSchema>\nexport type ReceiptFormData = z.infer<typeof receiptFormSchema>\nexport type ReceiptUpdateData = z.infer<typeof receiptUpdateSchema>\nexport type CreditNoteFormData = z.infer<typeof creditNoteFormSchema>\nexport type CreditNoteUpdateData = z.infer<typeof creditNoteUpdateSchema>\nexport type FinancialFilters = z.infer<typeof financialFiltersSchema>"