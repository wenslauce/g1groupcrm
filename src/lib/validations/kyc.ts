import { z } from 'zod'\n\nexport const kycDocumentSchema = z.object({\n  client_id: z.string().uuid('Invalid client ID'),\n  document_type: z.enum([\n    'passport',\n    'national_id',\n    'drivers_license',\n    'utility_bill',\n    'bank_statement',\n    'proof_of_address',\n    'business_registration',\n    'articles_of_incorporation',\n    'tax_certificate',\n    'other'\n  ]),\n  document_number: z.string().optional(),\n  issuing_country: z.string().min(2, 'Country code required').max(3, 'Invalid country code'),\n  issue_date: z.string().datetime().optional(),\n  expiry_date: z.string().datetime().optional(),\n  file_name: z.string().min(1, 'File name is required'),\n  file_size: z.number().min(1, 'File size must be greater than 0'),\n  file_type: z.string().min(1, 'File type is required'),\n  notes: z.string().optional(),\n  metadata: z.record(z.any()).optional()\n})\n\nexport const kycReviewSchema = z.object({\n  status: z.enum(['approved', 'rejected', 'pending_review']),\n  review_notes: z.string().min(1, 'Review notes are required'),\n  reviewed_by: z.string().uuid('Invalid reviewer ID').optional(),\n  compliance_flags: z.array(z.string()).optional(),\n  risk_score: z.number().min(0).max(100).optional()\n})\n\nexport const kycFiltersSchema = z.object({\n  client_id: z.string().uuid().optional(),\n  document_type: z.enum([\n    'passport',\n    'national_id',\n    'drivers_license',\n    'utility_bill',\n    'bank_statement',\n    'proof_of_address',\n    'business_registration',\n    'articles_of_incorporation',\n    'tax_certificate',\n    'other'\n  ]).optional(),\n  status: z.enum(['pending', 'approved', 'rejected', 'under_review']).optional(),\n  date_from: z.string().datetime().optional(),\n  date_to: z.string().datetime().optional(),\n  page: z.number().min(1).default(1),\n  limit: z.number().min(1).max(100).default(10)\n})\n\nexport const complianceAssessmentSchema = z.object({\n  client_id: z.string().uuid('Invalid client ID'),\n  assessment_type: z.enum(['initial', 'periodic', 'triggered', 'enhanced']),\n  risk_factors: z.array(z.object({\n    factor: z.string(),\n    score: z.number().min(0).max(10),\n    weight: z.number().min(0).max(1),\n    notes: z.string().optional()\n  })),\n  overall_risk_score: z.number().min(0).max(100),\n  risk_level: z.enum(['low', 'medium', 'high']),\n  recommendations: z.array(z.string()),\n  next_review_date: z.string().datetime(),\n  assessed_by: z.string().uuid('Invalid assessor ID').optional(),\n  notes: z.string().optional(),\n  metadata: z.record(z.any()).optional()\n})\n\nexport type KYCDocumentData = z.infer<typeof kycDocumentSchema>\nexport type KYCReviewData = z.infer<typeof kycReviewSchema>\nexport type KYCFilters = z.infer<typeof kycFiltersSchema>\nexport type ComplianceAssessmentData = z.infer<typeof complianceAssessmentSchema>"