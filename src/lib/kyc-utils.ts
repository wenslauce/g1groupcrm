import { KYCDocumentStatus, DocumentType, RiskLevel } from '@/types'\n\nexport const kycUtils = {\n  // Document type utilities\n  getDocumentTypeDisplayName(type: DocumentType): string {\n    const typeNames: Record<DocumentType, string> = {\n      passport: 'Passport',\n      national_id: 'National ID',\n      drivers_license: 'Driver\\'s License',\n      utility_bill: 'Utility Bill',\n      bank_statement: 'Bank Statement',\n      proof_of_address: 'Proof of Address',\n      business_registration: 'Business Registration',\n      articles_of_incorporation: 'Articles of Incorporation',\n      tax_certificate: 'Tax Certificate',\n      other: 'Other'\n    }\n    return typeNames[type]\n  },\n\n  getAllDocumentTypes(): { value: DocumentType; label: string; category: string }[] {\n    return [\n      { value: 'passport', label: 'Passport', category: 'Identity' },\n      { value: 'national_id', label: 'National ID', category: 'Identity' },\n      { value: 'drivers_license', label: 'Driver\\'s License', category: 'Identity' },\n      { value: 'utility_bill', label: 'Utility Bill', category: 'Address' },\n      { value: 'bank_statement', label: 'Bank Statement', category: 'Financial' },\n      { value: 'proof_of_address', label: 'Proof of Address', category: 'Address' },\n      { value: 'business_registration', label: 'Business Registration', category: 'Business' },\n      { value: 'articles_of_incorporation', label: 'Articles of Incorporation', category: 'Business' },\n      { value: 'tax_certificate', label: 'Tax Certificate', category: 'Financial' },\n      { value: 'other', label: 'Other', category: 'Other' }\n    ]\n  },\n\n  // Status utilities\n  getKYCStatusDisplayName(status: KYCDocumentStatus): string {\n    const statusNames: Record<KYCDocumentStatus, string> = {\n      pending: 'Pending Review',\n      approved: 'Approved',\n      rejected: 'Rejected',\n      under_review: 'Under Review'\n    }\n    return statusNames[status]\n  },\n\n  getKYCStatusColor(status: KYCDocumentStatus): string {\n    const statusColors: Record<KYCDocumentStatus, string> = {\n      pending: 'bg-yellow-100 text-yellow-800',\n      approved: 'bg-green-100 text-green-800',\n      rejected: 'bg-red-100 text-red-800',\n      under_review: 'bg-blue-100 text-blue-800'\n    }\n    return statusColors[status]\n  },\n\n  getAllKYCStatuses(): { value: KYCDocumentStatus; label: string }[] {\n    return [\n      { value: 'pending', label: 'Pending Review' },\n      { value: 'under_review', label: 'Under Review' },\n      { value: 'approved', label: 'Approved' },\n      { value: 'rejected', label: 'Rejected' }\n    ]\n  },\n\n  // Risk assessment utilities\n  calculateRiskScore(factors: Array<{ score: number; weight: number }>): number {\n    if (factors.length === 0) return 0\n    \n    const weightedSum = factors.reduce((sum, factor) => {\n      return sum + (factor.score * factor.weight)\n    }, 0)\n    \n    const totalWeight = factors.reduce((sum, factor) => sum + factor.weight, 0)\n    \n    return totalWeight > 0 ? Math.round((weightedSum / totalWeight) * 10) : 0\n  },\n\n  getRiskLevelFromScore(score: number): RiskLevel {\n    if (score <= 30) return 'low'\n    if (score <= 70) return 'medium'\n    return 'high'\n  },\n\n  getRiskLevelColor(level: RiskLevel): string {\n    const colors: Record<RiskLevel, string> = {\n      low: 'bg-green-100 text-green-800',\n      medium: 'bg-yellow-100 text-yellow-800',\n      high: 'bg-red-100 text-red-800'\n    }\n    return colors[level]\n  },\n\n  // Document validation\n  validateDocumentExpiry(expiryDate: string): boolean {\n    const expiry = new Date(expiryDate)\n    const now = new Date()\n    const threeMonthsFromNow = new Date()\n    threeMonthsFromNow.setMonth(threeMonthsFromNow.getMonth() + 3)\n    \n    return expiry > threeMonthsFromNow\n  },\n\n  isDocumentExpiringSoon(expiryDate: string, daysThreshold: number = 90): boolean {\n    const expiry = new Date(expiryDate)\n    const now = new Date()\n    const threshold = new Date()\n    threshold.setDate(threshold.getDate() + daysThreshold)\n    \n    return expiry <= threshold && expiry > now\n  },\n\n  isDocumentExpired(expiryDate: string): boolean {\n    const expiry = new Date(expiryDate)\n    const now = new Date()\n    return expiry <= now\n  },\n\n  // File validation\n  validateFileType(fileName: string, allowedTypes: string[]): boolean {\n    const extension = fileName.split('.').pop()?.toLowerCase()\n    return extension ? allowedTypes.includes(extension) : false\n  },\n\n  validateFileSize(fileSize: number, maxSizeMB: number = 10): boolean {\n    const maxSizeBytes = maxSizeMB * 1024 * 1024\n    return fileSize <= maxSizeBytes\n  },\n\n  getAllowedFileTypes(): string[] {\n    return ['pdf', 'jpg', 'jpeg', 'png', 'doc', 'docx']\n  },\n\n  getMaxFileSize(): number {\n    return 10 // MB\n  },\n\n  // Compliance workflow\n  getRequiredDocumentsForClientType(clientType: string): DocumentType[] {\n    const requirements: Record<string, DocumentType[]> = {\n      individual: ['passport', 'proof_of_address'],\n      corporate: ['business_registration', 'articles_of_incorporation', 'proof_of_address'],\n      institutional: ['business_registration', 'articles_of_incorporation', 'tax_certificate']\n    }\n    \n    return requirements[clientType] || []\n  },\n\n  calculateComplianceCompleteness(clientType: string, submittedDocuments: DocumentType[]): number {\n    const required = this.getRequiredDocumentsForClientType(clientType)\n    if (required.length === 0) return 100\n    \n    const submitted = submittedDocuments.filter(doc => required.includes(doc))\n    return Math.round((submitted.length / required.length) * 100)\n  },\n\n  // Risk factors\n  getStandardRiskFactors(): Array<{ factor: string; description: string; maxScore: number }> {\n    return [\n      {\n        factor: 'Geographic Risk',\n        description: 'Risk based on client\\'s country of residence/operation',\n        maxScore: 10\n      },\n      {\n        factor: 'Business Type Risk',\n        description: 'Risk associated with client\\'s business activities',\n        maxScore: 10\n      },\n      {\n        factor: 'Transaction Volume',\n        description: 'Risk based on expected transaction volumes',\n        maxScore: 10\n      },\n      {\n        factor: 'Source of Funds',\n        description: 'Risk related to the source of client\\'s funds',\n        maxScore: 10\n      },\n      {\n        factor: 'PEP Status',\n        description: 'Politically Exposed Person status',\n        maxScore: 10\n      },\n      {\n        factor: 'Sanctions Screening',\n        description: 'Results of sanctions list screening',\n        maxScore: 10\n      },\n      {\n        factor: 'Media Coverage',\n        description: 'Negative media coverage or adverse information',\n        maxScore: 10\n      },\n      {\n        factor: 'Document Quality',\n        description: 'Quality and authenticity of submitted documents',\n        maxScore: 10\n      }\n    ]\n  },\n\n  // Compliance flags\n  getComplianceFlags(): Array<{ flag: string; description: string; severity: 'low' | 'medium' | 'high' }> {\n    return [\n      {\n        flag: 'INCOMPLETE_DOCUMENTATION',\n        description: 'Required documents are missing or incomplete',\n        severity: 'medium'\n      },\n      {\n        flag: 'EXPIRED_DOCUMENTS',\n        description: 'One or more documents have expired',\n        severity: 'high'\n      },\n      {\n        flag: 'HIGH_RISK_JURISDICTION',\n        description: 'Client is from a high-risk jurisdiction',\n        severity: 'high'\n      },\n      {\n        flag: 'PEP_IDENTIFIED',\n        description: 'Client identified as Politically Exposed Person',\n        severity: 'high'\n      },\n      {\n        flag: 'SANCTIONS_MATCH',\n        description: 'Potential match found in sanctions screening',\n        severity: 'high'\n      },\n      {\n        flag: 'ADVERSE_MEDIA',\n        description: 'Negative media coverage identified',\n        severity: 'medium'\n      },\n      {\n        flag: 'INCONSISTENT_INFORMATION',\n        description: 'Inconsistencies found in provided information',\n        severity: 'medium'\n      },\n      {\n        flag: 'UNUSUAL_TRANSACTION_PATTERN',\n        description: 'Unusual or suspicious transaction patterns',\n        severity: 'high'\n      }\n    ]\n  },\n\n  // Review workflow\n  canTransitionKYCStatus(currentStatus: KYCDocumentStatus, newStatus: KYCDocumentStatus): boolean {\n    const allowedTransitions: Record<KYCDocumentStatus, KYCDocumentStatus[]> = {\n      pending: ['under_review', 'approved', 'rejected'],\n      under_review: ['approved', 'rejected', 'pending'],\n      approved: ['under_review'], // Can be re-reviewed if needed\n      rejected: ['under_review', 'pending'] // Can be resubmitted\n    }\n    \n    return allowedTransitions[currentStatus]?.includes(newStatus) || false\n  },\n\n  // Reporting utilities\n  generateComplianceReport(documents: any[], assessments: any[]) {\n    const totalDocuments = documents.length\n    const approvedDocuments = documents.filter(doc => doc.status === 'approved').length\n    const rejectedDocuments = documents.filter(doc => doc.status === 'rejected').length\n    const pendingDocuments = documents.filter(doc => doc.status === 'pending' || doc.status === 'under_review').length\n    \n    const averageRiskScore = assessments.length > 0 \n      ? assessments.reduce((sum, assessment) => sum + assessment.overall_risk_score, 0) / assessments.length\n      : 0\n    \n    const riskDistribution = {\n      low: assessments.filter(a => a.risk_level === 'low').length,\n      medium: assessments.filter(a => a.risk_level === 'medium').length,\n      high: assessments.filter(a => a.risk_level === 'high').length\n    }\n    \n    return {\n      totalDocuments,\n      approvedDocuments,\n      rejectedDocuments,\n      pendingDocuments,\n      approvalRate: totalDocuments > 0 ? (approvedDocuments / totalDocuments) * 100 : 0,\n      averageRiskScore: Math.round(averageRiskScore),\n      riskDistribution\n    }\n  },\n\n  // Notification utilities\n  getKYCNotificationMessage(status: KYCDocumentStatus, documentType: DocumentType): string {\n    const docName = this.getDocumentTypeDisplayName(documentType)\n    \n    switch (status) {\n      case 'approved':\n        return `Your ${docName} has been approved and is now compliant.`\n      case 'rejected':\n        return `Your ${docName} has been rejected. Please review the feedback and resubmit.`\n      case 'under_review':\n        return `Your ${docName} is currently under review by our compliance team.`\n      default:\n        return `Your ${docName} has been received and is pending review.`\n    }\n  },\n\n  // Due diligence levels\n  getDueDiligenceLevel(riskScore: number, clientType: string): 'standard' | 'enhanced' | 'simplified' {\n    if (riskScore >= 70) return 'enhanced'\n    if (riskScore <= 30 && clientType === 'individual') return 'simplified'\n    return 'standard'\n  },\n\n  getRequiredDueDiligenceMeasures(level: 'standard' | 'enhanced' | 'simplified'): string[] {\n    const measures: Record<string, string[]> = {\n      simplified: [\n        'Basic identity verification',\n        'Address verification',\n        'Basic sanctions screening'\n      ],\n      standard: [\n        'Identity verification',\n        'Address verification',\n        'Source of funds verification',\n        'Sanctions and PEP screening',\n        'Business purpose assessment'\n      ],\n      enhanced: [\n        'Enhanced identity verification',\n        'Enhanced address verification',\n        'Detailed source of funds verification',\n        'Enhanced sanctions and PEP screening',\n        'Adverse media screening',\n        'Senior management approval',\n        'Ongoing monitoring',\n        'Additional documentation requirements'\n      ]\n    }\n    \n    return measures[level] || measures.standard\n  }\n}"