// Client-side PDF generation utilities\n\ninterface PDFGenerationOptions {\n  includeQR?: boolean\n  includeSignature?: boolean\n  watermark?: string\n}\n\ninterface PDFGenerationResult {\n  success: boolean\n  pdf_url?: string\n  filename?: string\n  error?: string\n}\n\nexport class PDFGenerator {\n  private static readonly EDGE_FUNCTION_URL = '/api/generate-pdf'\n\n  /**\n   * Generate PDF for SKR document\n   */\n  static async generateSKRPDF(\n    skrId: string, \n    options: PDFGenerationOptions = {}\n  ): Promise<PDFGenerationResult> {\n    return this.generatePDF('skr', skrId, options)\n  }\n\n  /**\n   * Generate PDF for Invoice document\n   */\n  static async generateInvoicePDF(\n    invoiceId: string, \n    options: PDFGenerationOptions = {}\n  ): Promise<PDFGenerationResult> {\n    return this.generatePDF('invoice', invoiceId, options)\n  }\n\n  /**\n   * Generate PDF for Receipt document\n   */\n  static async generateReceiptPDF(\n    receiptId: string, \n    options: PDFGenerationOptions = {}\n  ): Promise<PDFGenerationResult> {\n    return this.generatePDF('receipt', receiptId, options)\n  }\n\n  /**\n   * Generate PDF for Credit Note document\n   */\n  static async generateCreditNotePDF(\n    creditNoteId: string, \n    options: PDFGenerationOptions = {}\n  ): Promise<PDFGenerationResult> {\n    return this.generatePDF('credit_note', creditNoteId, options)\n  }\n\n  /**\n   * Generic PDF generation method\n   */\n  private static async generatePDF(\n    type: 'skr' | 'invoice' | 'receipt' | 'credit_note',\n    id: string,\n    options: PDFGenerationOptions = {}\n  ): Promise<PDFGenerationResult> {\n    try {\n      const response = await fetch(this.EDGE_FUNCTION_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          type,\n          id,\n          options\n        })\n      })\n\n      const result = await response.json()\n\n      if (!response.ok) {\n        return {\n          success: false,\n          error: result.error || 'Failed to generate PDF'\n        }\n      }\n\n      return {\n        success: true,\n        pdf_url: result.pdf_url,\n        filename: result.filename\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error occurred'\n      }\n    }\n  }\n\n  /**\n   * Download PDF directly to user's device\n   */\n  static async downloadPDF(\n    type: 'skr' | 'invoice' | 'receipt' | 'credit_note',\n    id: string,\n    options: PDFGenerationOptions = {}\n  ): Promise<void> {\n    const result = await this.generatePDF(type, id, options)\n    \n    if (!result.success || !result.pdf_url) {\n      throw new Error(result.error || 'Failed to generate PDF')\n    }\n\n    // Create a temporary link and trigger download\n    const link = document.createElement('a')\n    link.href = result.pdf_url\n    link.download = result.filename || `${type}-${id}.pdf`\n    link.target = '_blank'\n    document.body.appendChild(link)\n    link.click()\n    document.body.removeChild(link)\n  }\n\n  /**\n   * Open PDF in new tab\n   */\n  static async openPDF(\n    type: 'skr' | 'invoice' | 'receipt' | 'credit_note',\n    id: string,\n    options: PDFGenerationOptions = {}\n  ): Promise<void> {\n    const result = await this.generatePDF(type, id, options)\n    \n    if (!result.success || !result.pdf_url) {\n      throw new Error(result.error || 'Failed to generate PDF')\n    }\n\n    // Open PDF in new tab\n    window.open(result.pdf_url, '_blank')\n  }\n\n  /**\n   * Get PDF URL without downloading\n   */\n  static async getPDFUrl(\n    type: 'skr' | 'invoice' | 'receipt' | 'credit_note',\n    id: string,\n    options: PDFGenerationOptions = {}\n  ): Promise<string> {\n    const result = await this.generatePDF(type, id, options)\n    \n    if (!result.success || !result.pdf_url) {\n      throw new Error(result.error || 'Failed to generate PDF')\n    }\n\n    return result.pdf_url\n  }\n\n  /**\n   * Batch generate multiple PDFs\n   */\n  static async batchGeneratePDFs(\n    requests: Array<{\n      type: 'skr' | 'invoice' | 'receipt' | 'credit_note'\n      id: string\n      options?: PDFGenerationOptions\n    }>\n  ): Promise<PDFGenerationResult[]> {\n    const promises = requests.map(request => \n      this.generatePDF(request.type, request.id, request.options || {})\n    )\n\n    return Promise.all(promises)\n  }\n\n  /**\n   * Check if PDF generation is available\n   */\n  static async isAvailable(): Promise<boolean> {\n    try {\n      const response = await fetch(this.EDGE_FUNCTION_URL, {\n        method: 'OPTIONS'\n      })\n      return response.ok\n    } catch {\n      return false\n    }\n  }\n\n  /**\n   * Get supported document types\n   */\n  static getSupportedTypes(): string[] {\n    return ['skr', 'invoice', 'receipt', 'credit_note']\n  }\n\n  /**\n   * Validate PDF generation options\n   */\n  static validateOptions(options: PDFGenerationOptions): string[] {\n    const errors: string[] = []\n    \n    // Add validation logic as needed\n    if (options.watermark && options.watermark.length > 50) {\n      errors.push('Watermark text is too long (max 50 characters)')\n    }\n    \n    return errors\n  }\n\n  /**\n   * Get default options for document type\n   */\n  static getDefaultOptions(type: string): PDFGenerationOptions {\n    switch (type) {\n      case 'skr':\n        return {\n          includeQR: true,\n          includeSignature: true\n        }\n      case 'invoice':\n        return {\n          includeSignature: false\n        }\n      case 'receipt':\n        return {\n          includeSignature: false\n        }\n      case 'credit_note':\n        return {\n          includeSignature: false,\n          watermark: 'CREDIT NOTE'\n        }\n      default:\n        return {}\n    }\n  }\n}"