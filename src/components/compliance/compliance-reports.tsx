'use client'\n\nimport { useState, useEffect } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'\nimport { Badge } from '@/components/ui/badge'\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table'\nimport { \n  Download, \n  FileText, \n  Calendar, \n  Filter,\n  Loader2,\n  AlertTriangle,\n  User,\n  Shield,\n  Eye,\n  BarChart3\n} from 'lucide-react'\nimport { formatDateTime } from '@/lib/utils'\nimport { usePermissions } from '@/contexts/auth-context'\n\ninterface AuditLog {\n  id: string\n  action: string\n  table_name: string\n  record_id: string\n  old_values: any\n  new_values: any\n  user_id: string\n  created_at: string\n  metadata: any\n  user?: {\n    id: string\n    name: string\n    email: string\n  }\n}\n\nexport function ComplianceReports() {\n  const [auditLogs, setAuditLogs] = useState<AuditLog[]>([])\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState('')\n  const [actionFilter, setActionFilter] = useState('')\n  const [tableFilter, setTableFilter] = useState('')\n  const [userFilter, setUserFilter] = useState('')\n  const [dateFromFilter, setDateFromFilter] = useState('')\n  const [dateToFilter, setDateToFilter] = useState('')\n  const [page, setPage] = useState(1)\n  const [totalPages, setTotalPages] = useState(1)\n  const [totalCount, setTotalCount] = useState(0)\n  \n  const permissions = usePermissions()\n  const limit = 20\n\n  useEffect(() => {\n    fetchAuditLogs()\n  }, [page, actionFilter, tableFilter, userFilter, dateFromFilter, dateToFilter])\n\n  const fetchAuditLogs = async () => {\n    setLoading(true)\n    try {\n      const params = new URLSearchParams({\n        page: page.toString(),\n        limit: limit.toString(),\n        ...(actionFilter && { action: actionFilter }),\n        ...(tableFilter && { table_name: tableFilter }),\n        ...(userFilter && { user_id: userFilter }),\n        ...(dateFromFilter && { date_from: dateFromFilter }),\n        ...(dateToFilter && { date_to: dateToFilter })\n      })\n      \n      const response = await fetch(`/api/audit/logs?${params}`)\n      const result = await response.json()\n      \n      if (!response.ok) {\n        throw new Error(result.error || 'Failed to fetch audit logs')\n      }\n      \n      setAuditLogs(result.data)\n      setTotalPages(result.total_pages)\n      setTotalCount(result.count)\n    } catch (error) {\n      setError(error instanceof Error ? error.message : 'An error occurred')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const clearFilters = () => {\n    setActionFilter('')\n    setTableFilter('')\n    setUserFilter('')\n    setDateFromFilter('')\n    setDateToFilter('')\n    setPage(1)\n  }\n\n  const exportAuditReport = async () => {\n    try {\n      const params = new URLSearchParams({\n        ...(actionFilter && { action: actionFilter }),\n        ...(tableFilter && { table_name: tableFilter }),\n        ...(userFilter && { user_id: userFilter }),\n        ...(dateFromFilter && { date_from: dateFromFilter }),\n        ...(dateToFilter && { date_to: dateToFilter }),\n        format: 'csv'\n      })\n      \n      const response = await fetch(`/api/audit/export?${params}`)\n      \n      if (response.ok) {\n        const blob = await response.blob()\n        const url = window.URL.createObjectURL(blob)\n        const a = document.createElement('a')\n        a.href = url\n        a.download = `audit-report-${new Date().toISOString().split('T')[0]}.csv`\n        document.body.appendChild(a)\n        a.click()\n        window.URL.revokeObjectURL(url)\n        document.body.removeChild(a)\n      }\n    } catch (error) {\n      console.error('Failed to export audit report:', error)\n    }\n  }\n\n  const getActionColor = (action: string) => {\n    const colors: Record<string, string> = {\n      CREATE: 'bg-green-100 text-green-800',\n      UPDATE: 'bg-blue-100 text-blue-800',\n      DELETE: 'bg-red-100 text-red-800',\n      LOGIN: 'bg-purple-100 text-purple-800',\n      LOGOUT: 'bg-gray-100 text-gray-800'\n    }\n    return colors[action] || 'bg-gray-100 text-gray-800'\n  }\n\n  const getTableDisplayName = (tableName: string) => {\n    const names: Record<string, string> = {\n      clients: 'Clients',\n      skrs: 'SKRs',\n      assets: 'Assets',\n      invoices: 'Invoices',\n      receipts: 'Receipts',\n      credit_notes: 'Credit Notes',\n      kyc_documents: 'KYC Documents',\n      compliance_assessments: 'Risk Assessments',\n      user_profiles: 'User Profiles'\n    }\n    return names[tableName] || tableName\n  }\n\n  if (!permissions.canViewAuditLogs()) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"text-center\">\n            <Shield className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n            <h3 className=\"text-lg font-semibold mb-2\">Access Restricted</h3>\n            <p className=\"text-muted-foreground\">\n              You don't have permission to view audit logs and compliance reports\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  if (error) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"text-center text-red-600\">\n            <AlertTriangle className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n            <p>{error}</p>\n            <Button onClick={fetchAuditLogs} className=\"mt-4\">\n              Try Again\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold tracking-tight\">Audit Trail & Reports</h2>\n          <p className=\"text-muted-foreground\">\n            Monitor system activities and generate compliance reports\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button onClick={exportAuditReport} variant=\"outline\">\n            <Download className=\"mr-2 h-4 w-4\" />\n            Export Report\n          </Button>\n        </div>\n      </div>\n\n      {/* Summary Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-2\">\n              <FileText className=\"h-5 w-5 text-blue-500\" />\n              <div>\n                <div className=\"text-2xl font-bold\">{totalCount}</div>\n                <div className=\"text-sm text-muted-foreground\">Total Activities</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-2\">\n              <User className=\"h-5 w-5 text-green-500\" />\n              <div>\n                <div className=\"text-2xl font-bold\">\n                  {new Set(auditLogs.map(log => log.user_id)).size}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Active Users</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-2\">\n              <Shield className=\"h-5 w-5 text-orange-500\" />\n              <div>\n                <div className=\"text-2xl font-bold\">\n                  {auditLogs.filter(log => ['CREATE', 'UPDATE', 'DELETE'].includes(log.action)).length}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Data Changes</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-2\">\n              <Calendar className=\"h-5 w-5 text-purple-500\" />\n              <div>\n                <div className=\"text-2xl font-bold\">\n                  {auditLogs.filter(log => {\n                    const logDate = new Date(log.created_at)\n                    const today = new Date()\n                    return logDate.toDateString() === today.toDateString()\n                  }).length}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Today's Activities</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Filter className=\"h-5 w-5\" />\n            Filters\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n            {/* Action Filter */}\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Action</label>\n              <Select value={actionFilter || 'all'} onValueChange={(value) => setActionFilter(value === 'all' ? '' : value)}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"All actions\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Actions</SelectItem>\n                  <SelectItem value=\"CREATE\">Create</SelectItem>\n                  <SelectItem value=\"UPDATE\">Update</SelectItem>\n                  <SelectItem value=\"DELETE\">Delete</SelectItem>\n                  <SelectItem value=\"LOGIN\">Login</SelectItem>\n                  <SelectItem value=\"LOGOUT\">Logout</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Table Filter */}\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Table</label>\n              <Select value={tableFilter || 'all'} onValueChange={(value) => setTableFilter(value === 'all' ? '' : value)}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"All tables\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Tables</SelectItem>\n                  <SelectItem value=\"clients\">Clients</SelectItem>\n                  <SelectItem value=\"skrs\">SKRs</SelectItem>\n                  <SelectItem value=\"assets\">Assets</SelectItem>\n                  <SelectItem value=\"invoices\">Invoices</SelectItem>\n                  <SelectItem value=\"kyc_documents\">KYC Documents</SelectItem>\n                  <SelectItem value=\"compliance_assessments\">Risk Assessments</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Date Range */}\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">From Date</label>\n              <Input\n                type=\"datetime-local\"\n                value={dateFromFilter}\n                onChange={(e) => setDateFromFilter(e.target.value)}\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">To Date</label>\n              <Input\n                type=\"datetime-local\"\n                value={dateToFilter}\n                onChange={(e) => setDateToFilter(e.target.value)}\n              />\n            </div>\n\n            {/* Clear Filters */}\n            <div className=\"flex items-end\">\n              {(actionFilter || tableFilter || userFilter || dateFromFilter || dateToFilter) && (\n                <Button variant=\"outline\" onClick={clearFilters}>\n                  Clear Filters\n                </Button>\n              )}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Audit Logs Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Audit Trail</CardTitle>\n          <CardDescription>\n            Comprehensive log of all system activities and changes\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          {loading ? (\n            <div className=\"flex items-center justify-center p-8\">\n              <Loader2 className=\"h-8 w-8 animate-spin\" />\n            </div>\n          ) : auditLogs.length === 0 ? (\n            <div className=\"text-center p-8\">\n              <FileText className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n              <h3 className=\"text-lg font-semibold mb-2\">No Audit Logs Found</h3>\n              <p className=\"text-muted-foreground\">\n                No audit logs match your current filters\n              </p>\n            </div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Timestamp</TableHead>\n                  <TableHead>Action</TableHead>\n                  <TableHead>Table</TableHead>\n                  <TableHead>User</TableHead>\n                  <TableHead>Record ID</TableHead>\n                  <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {auditLogs.map((log) => (\n                  <TableRow key={log.id}>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                        <span className=\"text-sm\">\n                          {formatDateTime(log.created_at)}\n                        </span>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge className={getActionColor(log.action)}>\n                        {log.action}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"font-medium\">\n                        {getTableDisplayName(log.table_name)}\n                      </span>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <User className=\"h-4 w-4 text-muted-foreground\" />\n                        <div>\n                          <div className=\"font-medium\">{log.user?.name || 'System'}</div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            {log.user?.email}\n                          </div>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <code className=\"text-xs bg-muted px-2 py-1 rounded\">\n                        {log.record_id.substring(0, 8)}...\n                      </code>\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      <Button variant=\"ghost\" size=\"sm\">\n                        <Eye className=\"h-4 w-4\" />\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Pagination */}\n      {totalPages > 1 && (\n        <div className=\"flex items-center justify-between\">\n          <div className=\"text-sm text-muted-foreground\">\n            Showing {((page - 1) * limit) + 1} to {Math.min(page * limit, totalCount)} of {totalCount} entries\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setPage(page - 1)}\n              disabled={page === 1}\n            >\n              Previous\n            </Button>\n            <div className=\"flex items-center gap-1\">\n              {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {\n                const pageNum = Math.max(1, Math.min(totalPages - 4, page - 2)) + i\n                return (\n                  <Button\n                    key={pageNum}\n                    variant={pageNum === page ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => setPage(pageNum)}\n                    className={pageNum === page ? \"bg-g1-primary hover:bg-g1-primary/90\" : \"\"}\n                  >\n                    {pageNum}\n                  </Button>\n                )\n              })}\n            </div>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setPage(page + 1)}\n              disabled={page === totalPages}\n            >\n              Next\n            </Button>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}"