'use client'\n\nimport { useState, useEffect } from 'react'\nimport { useRouter } from 'next/navigation'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Textarea } from '@/components/ui/textarea'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'\nimport { Badge } from '@/components/ui/badge'\nimport { \n  Save, \n  X, \n  Plus, \n  Trash2, \n  Loader2, \n  Shield, \n  User, \n  AlertTriangle,\n  Calculator,\n  Calendar\n} from 'lucide-react'\nimport { ClientWithRelations } from '@/types'\nimport { ComplianceAssessmentData } from '@/lib/validations/kyc'\nimport { kycUtils } from '@/lib/kyc-utils'\nimport { formatDateTime } from '@/lib/utils'\n\ninterface RiskFactor {\n  factor: string\n  score: number\n  weight: number\n  notes?: string\n}\n\ninterface RiskAssessmentFormProps {\n  client?: ClientWithRelations | null\n  onSave?: () => void\n  onCancel?: () => void\n}\n\nexport function RiskAssessmentForm({ client, onSave, onCancel }: RiskAssessmentFormProps) {\n  const [formData, setFormData] = useState<Partial<ComplianceAssessmentData>>({\n    client_id: client?.id || '',\n    assessment_type: 'initial',\n    risk_factors: [],\n    overall_risk_score: 0,\n    risk_level: 'low',\n    recommendations: [],\n    next_review_date: '',\n    notes: ''\n  })\n  const [clients, setClients] = useState<ClientWithRelations[]>([])\n  const [selectedClient, setSelectedClient] = useState<ClientWithRelations | null>(client || null)\n  const [riskFactors, setRiskFactors] = useState<RiskFactor[]>([])\n  const [newRecommendation, setNewRecommendation] = useState('')\n  const [isLoading, setIsLoading] = useState(false)\n  const [isLoadingClients, setIsLoadingClients] = useState(!client)\n  const [error, setError] = useState('')\n  const [success, setSuccess] = useState('')\n  \n  const router = useRouter()\n  const standardFactors = kycUtils.getStandardRiskFactors()\n\n  useEffect(() => {\n    if (!client) {\n      fetchClients()\n    }\n    initializeRiskFactors()\n  }, [])\n\n  useEffect(() => {\n    calculateRiskScore()\n  }, [riskFactors])\n\n  const fetchClients = async () => {\n    setIsLoadingClients(true)\n    try {\n      const response = await fetch('/api/clients?limit=100')\n      const result = await response.json()\n      \n      if (response.ok) {\n        setClients(result.data)\n      }\n    } catch (error) {\n      console.error('Failed to fetch clients:', error)\n    } finally {\n      setIsLoadingClients(false)\n    }\n  }\n\n  const initializeRiskFactors = () => {\n    const initialFactors = standardFactors.map(factor => ({\n      factor: factor.factor,\n      score: 5, // Default middle score\n      weight: 1 / standardFactors.length, // Equal weights\n      notes: ''\n    }))\n    setRiskFactors(initialFactors)\n  }\n\n  const calculateRiskScore = () => {\n    const score = kycUtils.calculateRiskScore(riskFactors)\n    const riskLevel = kycUtils.getRiskLevelFromScore(score)\n    \n    setFormData(prev => ({\n      ...prev,\n      overall_risk_score: score,\n      risk_level: riskLevel,\n      risk_factors: riskFactors\n    }))\n  }\n\n  const handleClientChange = (clientId: string) => {\n    const client = clients.find(c => c.id === clientId)\n    setSelectedClient(client || null)\n    setFormData(prev => ({ ...prev, client_id: clientId }))\n  }\n\n  const updateRiskFactor = (index: number, field: keyof RiskFactor, value: any) => {\n    const newFactors = [...riskFactors]\n    newFactors[index] = { ...newFactors[index], [field]: value }\n    setRiskFactors(newFactors)\n  }\n\n  const addRecommendation = () => {\n    if (newRecommendation.trim()) {\n      setFormData(prev => ({\n        ...prev,\n        recommendations: [...(prev.recommendations || []), newRecommendation.trim()]\n      }))\n      setNewRecommendation('')\n    }\n  }\n\n  const removeRecommendation = (index: number) => {\n    setFormData(prev => ({\n      ...prev,\n      recommendations: prev.recommendations?.filter((_, i) => i !== index) || []\n    }))\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setIsLoading(true)\n    setError('')\n    setSuccess('')\n\n    try {\n      // Validate weights sum to 1\n      const totalWeight = riskFactors.reduce((sum, factor) => sum + factor.weight, 0)\n      if (Math.abs(totalWeight - 1) > 0.01) {\n        throw new Error('Risk factor weights must sum to 1.0')\n      }\n\n      const response = await fetch('/api/compliance/assessments', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formData)\n      })\n\n      const result = await response.json()\n\n      if (!response.ok) {\n        throw new Error(result.error || 'Failed to save risk assessment')\n      }\n\n      setSuccess('Risk assessment saved successfully!')\n      \n      if (onSave) {\n        setTimeout(() => onSave(), 1000)\n      } else {\n        setTimeout(() => {\n          router.push('/dashboard/compliance')\n        }, 1000)\n      }\n    } catch (error) {\n      setError(error instanceof Error ? error.message : 'An error occurred')\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const updateFormData = (field: string, value: any) => {\n    setFormData(prev => ({ ...prev, [field]: value }))\n  }\n\n  const totalWeight = riskFactors.reduce((sum, factor) => sum + factor.weight, 0)\n  const isWeightValid = Math.abs(totalWeight - 1) <= 0.01\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Shield className=\"h-5 w-5\" />\n              Risk Assessment\n            </CardTitle>\n            <CardDescription>\n              Conduct comprehensive risk assessment for compliance purposes\n            </CardDescription>\n          </div>\n          {onCancel && (\n            <Button variant=\"ghost\" size=\"icon\" onClick={onCancel}>\n              <X className=\"h-4 w-4\" />\n            </Button>\n          )}\n        </div>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {/* Client Selection */}\n          {!client && (\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center gap-2 mb-4\">\n                <User className=\"h-4 w-4\" />\n                <h3 className=\"text-lg font-medium\">Client Information</h3>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"client_id\">Client *</Label>\n                <Select\n                  value={formData.client_id}\n                  onValueChange={handleClientChange}\n                  disabled={isLoading || isLoadingClients}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select a client\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {clients.map((client) => (\n                      <SelectItem key={client.id} value={client.id}>\n                        <div className=\"flex items-center gap-2\">\n                          <span>{client.name}</span>\n                          <Badge size=\"sm\">\n                            {client.type}\n                          </Badge>\n                        </div>\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          )}\n\n          {/* Selected Client Details */}\n          {selectedClient && (\n            <div className=\"p-4 bg-muted rounded-lg\">\n              <h4 className=\"font-medium mb-2\">Client Details</h4>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 text-sm\">\n                <div>\n                  <span className=\"text-muted-foreground\">Name:</span>\n                  <span className=\"ml-2 font-medium\">{selectedClient.name}</span>\n                </div>\n                <div>\n                  <span className=\"text-muted-foreground\">Type:</span>\n                  <span className=\"ml-2\">{selectedClient.type}</span>\n                </div>\n                <div>\n                  <span className=\"text-muted-foreground\">Country:</span>\n                  <span className=\"ml-2\">{selectedClient.country}</span>\n                </div>\n                <div>\n                  <span className=\"text-muted-foreground\">Current Risk:</span>\n                  <Badge className={kycUtils.getRiskLevelColor(selectedClient.risk_level)} size=\"sm\">\n                    {selectedClient.risk_level?.toUpperCase()}\n                  </Badge>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Assessment Details */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center gap-2 mb-4\">\n              <AlertTriangle className=\"h-4 w-4\" />\n              <h3 className=\"text-lg font-medium\">Assessment Details</h3>\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"assessment_type\">Assessment Type *</Label>\n                <Select\n                  value={formData.assessment_type}\n                  onValueChange={(value) => updateFormData('assessment_type', value)}\n                  disabled={isLoading}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"initial\">Initial Assessment</SelectItem>\n                    <SelectItem value=\"periodic\">Periodic Review</SelectItem>\n                    <SelectItem value=\"triggered\">Triggered Review</SelectItem>\n                    <SelectItem value=\"enhanced\">Enhanced Due Diligence</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"next_review_date\">Next Review Date *</Label>\n                <Input\n                  id=\"next_review_date\"\n                  type=\"datetime-local\"\n                  value={formData.next_review_date ? new Date(formData.next_review_date).toISOString().slice(0, 16) : ''}\n                  onChange={(e) => updateFormData('next_review_date', e.target.value ? new Date(e.target.value).toISOString() : '')}\n                  disabled={isLoading}\n                  required\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Risk Factors */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-2\">\n                <Calculator className=\"h-4 w-4\" />\n                <h3 className=\"text-lg font-medium\">Risk Factors</h3>\n              </div>\n              <div className=\"text-sm\">\n                <span className={`font-medium ${isWeightValid ? 'text-green-600' : 'text-red-600'}`}>\n                  Total Weight: {totalWeight.toFixed(3)}\n                </span>\n                {!isWeightValid && (\n                  <span className=\"text-red-600 ml-2\">(Must equal 1.0)</span>\n                )}\n              </div>\n            </div>\n            \n            <div className=\"space-y-4\">\n              {riskFactors.map((factor, index) => {\n                const standardFactor = standardFactors.find(sf => sf.factor === factor.factor)\n                return (\n                  <div key={index} className=\"p-4 border rounded-lg\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 items-end\">\n                      <div className=\"space-y-2\">\n                        <Label>Risk Factor</Label>\n                        <div className=\"font-medium\">{factor.factor}</div>\n                        {standardFactor && (\n                          <div className=\"text-xs text-muted-foreground\">\n                            {standardFactor.description}\n                          </div>\n                        )}\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        <Label>Score (0-10)</Label>\n                        <Input\n                          type=\"number\"\n                          min=\"0\"\n                          max=\"10\"\n                          step=\"0.1\"\n                          value={factor.score}\n                          onChange={(e) => updateRiskFactor(index, 'score', parseFloat(e.target.value) || 0)}\n                          disabled={isLoading}\n                        />\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        <Label>Weight (0-1)</Label>\n                        <Input\n                          type=\"number\"\n                          min=\"0\"\n                          max=\"1\"\n                          step=\"0.01\"\n                          value={factor.weight}\n                          onChange={(e) => updateRiskFactor(index, 'weight', parseFloat(e.target.value) || 0)}\n                          disabled={isLoading}\n                        />\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        <Label>Weighted Score</Label>\n                        <div className=\"text-lg font-semibold p-2 bg-muted rounded\">\n                          {(factor.score * factor.weight * 10).toFixed(1)}\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"mt-3 space-y-2\">\n                      <Label>Notes</Label>\n                      <Textarea\n                        value={factor.notes || ''}\n                        onChange={(e) => updateRiskFactor(index, 'notes', e.target.value)}\n                        placeholder=\"Additional notes for this risk factor\"\n                        rows={2}\n                        disabled={isLoading}\n                      />\n                    </div>\n                  </div>\n                )\n              })}\n            </div>\n          </div>\n\n          {/* Risk Score Summary */}\n          <div className=\"p-4 bg-blue-50 rounded-lg\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <h4 className=\"font-medium\">Risk Assessment Summary</h4>\n              <Badge className={kycUtils.getRiskLevelColor(formData.risk_level || 'low')} size=\"lg\">\n                {formData.risk_level?.toUpperCase()} RISK\n              </Badge>\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n              <div>\n                <span className=\"text-muted-foreground\">Overall Score:</span>\n                <span className=\"ml-2 font-bold text-lg\">{formData.overall_risk_score}/100</span>\n              </div>\n              <div>\n                <span className=\"text-muted-foreground\">Risk Level:</span>\n                <span className=\"ml-2 font-medium\">{formData.risk_level?.toUpperCase()}</span>\n              </div>\n              <div>\n                <span className=\"text-muted-foreground\">Due Diligence:</span>\n                <span className=\"ml-2 font-medium\">\n                  {kycUtils.getDueDiligenceLevel(formData.overall_risk_score || 0, selectedClient?.type || 'individual').toUpperCase()}\n                </span>\n              </div>\n            </div>\n          </div>\n\n          {/* Recommendations */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium\">Recommendations</h3>\n            \n            <div className=\"space-y-2\">\n              <div className=\"flex gap-2\">\n                <Input\n                  value={newRecommendation}\n                  onChange={(e) => setNewRecommendation(e.target.value)}\n                  placeholder=\"Add a recommendation\"\n                  disabled={isLoading}\n                />\n                <Button\n                  type=\"button\"\n                  onClick={addRecommendation}\n                  disabled={!newRecommendation.trim() || isLoading}\n                >\n                  <Plus className=\"h-4 w-4\" />\n                </Button>\n              </div>\n              \n              {formData.recommendations && formData.recommendations.length > 0 && (\n                <div className=\"space-y-2\">\n                  {formData.recommendations.map((rec, index) => (\n                    <div key={index} className=\"flex items-center gap-2 p-2 bg-muted rounded\">\n                      <span className=\"flex-1\">{rec}</span>\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => removeRecommendation(index)}\n                        disabled={isLoading}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Notes */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"notes\">Assessment Notes</Label>\n            <Textarea\n              id=\"notes\"\n              value={formData.notes}\n              onChange={(e) => updateFormData('notes', e.target.value)}\n              placeholder=\"Additional notes about this risk assessment\"\n              rows={4}\n              disabled={isLoading}\n            />\n          </div>\n\n          {success && (\n            <div className=\"text-sm text-green-600 bg-green-50 p-3 rounded-md\">\n              {success}\n            </div>\n          )}\n\n          {error && (\n            <div className=\"text-sm text-red-600 bg-red-50 p-3 rounded-md\">\n              {error}\n            </div>\n          )}\n\n          <div className=\"flex justify-end gap-2\">\n            {onCancel && (\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={onCancel}\n                disabled={isLoading}\n              >\n                Cancel\n              </Button>\n            )}\n            <Button\n              type=\"submit\"\n              disabled={isLoading || !formData.client_id || !isWeightValid || !formData.next_review_date}\n              className=\"bg-g1-primary hover:bg-g1-primary/90\"\n            >\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Saving Assessment...\n                </>\n              ) : (\n                <>\n                  <Save className=\"mr-2 h-4 w-4\" />\n                  Save Assessment\n                </>\n              )}\n            </Button>\n          </div>\n        </form>\n      </CardContent>\n    </Card>\n  )\n}"