'use client'\n\nimport { useState, useEffect } from 'react'\nimport { useRouter } from 'next/navigation'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Badge } from '@/components/ui/badge'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table'\nimport { \n  Search, \n  Filter, \n  Plus, \n  Eye, \n  Download,\n  Loader2,\n  FileText,\n  Calendar,\n  User,\n  Package\n} from 'lucide-react'\nimport { SKRWithRelations, ClientWithRelations } from '@/types'\nimport { skrUtils } from '@/lib/skr-utils'\nimport { clientUtils } from '@/lib/client-utils'\nimport { formatCurrency, formatDateTime } from '@/lib/utils'\nimport { usePermissions } from '@/contexts/auth-context'\n\ninterface SKRListProps {\n  showCreateButton?: boolean\n  clientId?: string\n}\n\nexport function SKRList({ showCreateButton = true, clientId }: SKRListProps) {\n  const [skrs, setSKRs] = useState<SKRWithRelations[]>([])\n  const [clients, setClients] = useState<ClientWithRelations[]>([])\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState('')\n  const [searchTerm, setSearchTerm] = useState('')\n  const [statusFilter, setStatusFilter] = useState('')\n  const [clientFilter, setClientFilter] = useState(clientId || '')\n  const [dateFromFilter, setDateFromFilter] = useState('')\n  const [dateToFilter, setDateToFilter] = useState('')\n  const [page, setPage] = useState(1)\n  const [totalPages, setTotalPages] = useState(1)\n  const [totalCount, setTotalCount] = useState(0)\n  \n  const router = useRouter()\n  const permissions = usePermissions()\n  const limit = 10\n\n  useEffect(() => {\n    fetchSKRs()\n    if (!clientId) {\n      fetchClients()\n    }\n  }, [page, searchTerm, statusFilter, clientFilter, dateFromFilter, dateToFilter, clientId])\n\n  const fetchSKRs = async () => {\n    setLoading(true)\n    try {\n      const params = new URLSearchParams({\n        page: page.toString(),\n        limit: limit.toString(),\n        ...(searchTerm && { search: searchTerm }),\n        ...(statusFilter && { status: statusFilter }),\n        ...(clientFilter && { client_id: clientFilter }),\n        ...(dateFromFilter && { date_from: dateFromFilter }),\n        ...(dateToFilter && { date_to: dateToFilter })\n      })\n      \n      const response = await fetch(`/api/skrs?${params}`)\n      const result = await response.json()\n      \n      if (!response.ok) {\n        throw new Error(result.error || 'Failed to fetch SKRs')\n      }\n      \n      setSKRs(result.data)\n      setTotalPages(result.total_pages)\n      setTotalCount(result.count)\n    } catch (error) {\n      setError(error instanceof Error ? error.message : 'An error occurred')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const fetchClients = async () => {\n    try {\n      const response = await fetch('/api/clients?limit=100')\n      const result = await response.json()\n      \n      if (response.ok) {\n        setClients(result.data)\n      }\n    } catch (error) {\n      console.error('Failed to fetch clients:', error)\n    }\n  }\n\n  const handleSearch = (value: string) => {\n    setSearchTerm(value)\n    setPage(1)\n  }\n\n  const handleStatusFilter = (value: string) => {\n    setStatusFilter(value === 'all' ? '' : value)\n    setPage(1)\n  }\n\n  const handleClientFilter = (value: string) => {\n    setClientFilter(value === 'all' ? '' : value)\n    setPage(1)\n  }\n\n  const clearFilters = () => {\n    setSearchTerm('')\n    setStatusFilter('')\n    setClientFilter(clientId || '')\n    setDateFromFilter('')\n    setDateToFilter('')\n    setPage(1)\n  }\n\n  const handleViewSKR = (skrId: string) => {\n    router.push(`/dashboard/skrs/${skrId}`)\n  }\n\n  const handleCreateSKR = () => {\n    router.push('/dashboard/skrs/create')\n  }\n\n  if (error) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"text-center text-red-600\">\n            <FileText className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n            <p>{error}</p>\n            <Button onClick={fetchSKRs} className=\"mt-4\">\n              Try Again\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold tracking-tight\">SKRs</h2>\n          <p className=\"text-muted-foreground\">\n            {totalCount} total SKR{totalCount !== 1 ? 's' : ''}\n          </p>\n        </div>\n        {showCreateButton && permissions.canCreateSKRs() && (\n          <Button onClick={handleCreateSKR} className=\"bg-g1-primary hover:bg-g1-primary/90\">\n            <Plus className=\"mr-2 h-4 w-4\" />\n            Create SKR\n          </Button>\n        )}\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Filter className=\"h-5 w-5\" />\n            Filters\n          </CardTitle>\n          <CardDescription>\n            Search and filter SKRs by various criteria\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            {/* Search */}\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Search</label>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search SKRs...\"\n                  value={searchTerm}\n                  onChange={(e) => handleSearch(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n\n            {/* Status Filter */}\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Status</label>\n              <Select value={statusFilter || 'all'} onValueChange={handleStatusFilter}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"All statuses\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Statuses</SelectItem>\n                  {skrUtils.getAllStatuses().map((status) => (\n                    <SelectItem key={status.value} value={status.value}>\n                      {status.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Client Filter */}\n            {!clientId && (\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium\">Client</label>\n                <Select value={clientFilter || 'all'} onValueChange={handleClientFilter}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"All clients\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Clients</SelectItem>\n                    {clients.map((client) => (\n                      <SelectItem key={client.id} value={client.id}>\n                        {client.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            )}\n\n            {/* Date Range */}\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Date Range</label>\n              <div className=\"flex gap-2\">\n                <Input\n                  type=\"date\"\n                  value={dateFromFilter}\n                  onChange={(e) => setDateFromFilter(e.target.value)}\n                  className=\"text-xs\"\n                />\n                <Input\n                  type=\"date\"\n                  value={dateToFilter}\n                  onChange={(e) => setDateToFilter(e.target.value)}\n                  className=\"text-xs\"\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Clear Filters */}\n          {(searchTerm || statusFilter || (clientFilter && clientFilter !== clientId) || dateFromFilter || dateToFilter) && (\n            <div className=\"mt-4 pt-4 border-t\">\n              <Button variant=\"outline\" size=\"sm\" onClick={clearFilters}>\n                Clear Filters\n              </Button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* SKR Table */}\n      <Card>\n        <CardContent className=\"p-0\">\n          {loading ? (\n            <div className=\"flex items-center justify-center p-8\">\n              <Loader2 className=\"h-8 w-8 animate-spin\" />\n            </div>\n          ) : skrs.length === 0 ? (\n            <div className=\"text-center p-8\">\n              <FileText className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n              <h3 className=\"text-lg font-semibold mb-2\">No SKRs Found</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                {searchTerm || statusFilter || clientFilter || dateFromFilter || dateToFilter\n                  ? 'No SKRs match your current filters'\n                  : 'No SKRs have been created yet'\n                }\n              </p>\n              {permissions.canCreateSKRs() && (\n                <Button onClick={handleCreateSKR} className=\"bg-g1-primary hover:bg-g1-primary/90\">\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                  Create First SKR\n                </Button>\n              )}\n            </div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>SKR Number</TableHead>\n                  <TableHead>Client</TableHead>\n                  <TableHead>Asset</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Value</TableHead>\n                  <TableHead>Created</TableHead>\n                  <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {skrs.map((skr) => (\n                  <TableRow key={skr.id} className=\"cursor-pointer hover:bg-muted/50\">\n                    <TableCell className=\"font-mono font-medium\">\n                      {skr.skr_number}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <User className=\"h-4 w-4 text-muted-foreground\" />\n                        <div>\n                          <div className=\"font-medium\">{skr.client?.name}</div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            {skr.client?.email}\n                          </div>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <Package className=\"h-4 w-4 text-muted-foreground\" />\n                        <div>\n                          <div className=\"font-medium\">{skr.asset?.asset_name}</div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            {skr.asset?.asset_type}\n                          </div>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge className={skrUtils.getStatusColor(skr.status)}>\n                        {skrUtils.getStatusDisplayName(skr.status)}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      {skr.asset && (\n                        <div className=\"font-medium\">\n                          {formatCurrency(skr.asset.declared_value, skr.asset.currency)}\n                        </div>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                        <Calendar className=\"h-4 w-4\" />\n                        {formatDateTime(skr.created_at)}\n                      </div>\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      <div className=\"flex items-center justify-end gap-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleViewSKR(skr.id)}\n                        >\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                        {skr.pdf_url && (\n                          <Button variant=\"ghost\" size=\"sm\">\n                            <Download className=\"h-4 w-4\" />\n                          </Button>\n                        )}\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Pagination */}\n      {totalPages > 1 && (\n        <div className=\"flex items-center justify-between\">\n          <div className=\"text-sm text-muted-foreground\">\n            Showing {((page - 1) * limit) + 1} to {Math.min(page * limit, totalCount)} of {totalCount} SKRs\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setPage(page - 1)}\n              disabled={page === 1}\n            >\n              Previous\n            </Button>\n            <div className=\"flex items-center gap-1\">\n              {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {\n                const pageNum = Math.max(1, Math.min(totalPages - 4, page - 2)) + i\n                return (\n                  <Button\n                    key={pageNum}\n                    variant={pageNum === page ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => setPage(pageNum)}\n                    className={pageNum === page ? \"bg-g1-primary hover:bg-g1-primary/90\" : \"\"}\n                  >\n                    {pageNum}\n                  </Button>\n                )\n              })}\n            </div>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setPage(page + 1)}\n              disabled={page === totalPages}\n            >\n              Next\n            </Button>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}"