'use client'\n\nimport { useState, useEffect } from 'react'\nimport { useRouter } from 'next/navigation'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Badge } from '@/components/ui/badge'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport { \n  Search, \n  Filter, \n  Plus, \n  Eye, \n  Download,\n  Loader2,\n  FileText,\n  Receipt,\n  Minus,\n  Calendar,\n  User,\n  DollarSign,\n  TrendingUp,\n  TrendingDown\n} from 'lucide-react'\nimport { InvoiceWithRelations, Receipt as ReceiptType, CreditNote } from '@/types'\nimport { financialUtils } from '@/lib/financial-utils'\nimport { formatCurrency, formatDateTime } from '@/lib/utils'\nimport { usePermissions } from '@/contexts/auth-context'\n\ninterface FinancialDashboardProps {\n  clientId?: string\n}\n\nexport function FinancialDashboard({ clientId }: FinancialDashboardProps) {\n  const [invoices, setInvoices] = useState<InvoiceWithRelations[]>([])\n  const [receipts, setReceipts] = useState<ReceiptType[]>([])\n  const [creditNotes, setCreditNotes] = useState<CreditNote[]>([])\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState('')\n  const [searchTerm, setSearchTerm] = useState('')\n  const [statusFilter, setStatusFilter] = useState('')\n  const [dateFromFilter, setDateFromFilter] = useState('')\n  const [dateToFilter, setDateToFilter] = useState('')\n  const [activeTab, setActiveTab] = useState('invoices')\n  const [page, setPage] = useState(1)\n  const [totalPages, setTotalPages] = useState(1)\n  const [totalCount, setTotalCount] = useState(0)\n  const [financialSummary, setFinancialSummary] = useState({\n    totalInvoiced: 0,\n    totalPaid: 0,\n    totalCredited: 0,\n    outstanding: 0,\n    paidPercentage: 0\n  })\n  \n  const router = useRouter()\n  const permissions = usePermissions()\n  const limit = 10\n\n  useEffect(() => {\n    fetchFinancialData()\n  }, [page, searchTerm, statusFilter, dateFromFilter, dateToFilter, activeTab, clientId])\n\n  const fetchFinancialData = async () => {\n    setLoading(true)\n    try {\n      const params = new URLSearchParams({\n        page: page.toString(),\n        limit: limit.toString(),\n        ...(searchTerm && { search: searchTerm }),\n        ...(statusFilter && { status: statusFilter }),\n        ...(clientId && { client_id: clientId }),\n        ...(dateFromFilter && { date_from: dateFromFilter }),\n        ...(dateToFilter && { date_to: dateToFilter })\n      })\n      \n      let endpoint = '/api/invoices'\n      if (activeTab === 'receipts') endpoint = '/api/receipts'\n      if (activeTab === 'credit-notes') endpoint = '/api/credit-notes'\n      \n      const response = await fetch(`${endpoint}?${params}`)\n      const result = await response.json()\n      \n      if (!response.ok) {\n        throw new Error(result.error || 'Failed to fetch financial data')\n      }\n      \n      if (activeTab === 'invoices') {\n        setInvoices(result.data)\n      } else if (activeTab === 'receipts') {\n        setReceipts(result.data)\n      } else if (activeTab === 'credit-notes') {\n        setCreditNotes(result.data)\n      }\n      \n      setTotalPages(result.total_pages)\n      setTotalCount(result.count)\n      \n      // Fetch summary data\n      if (activeTab === 'invoices') {\n        await fetchFinancialSummary()\n      }\n    } catch (error) {\n      setError(error instanceof Error ? error.message : 'An error occurred')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const fetchFinancialSummary = async () => {\n    try {\n      const [invoicesRes, receiptsRes, creditNotesRes] = await Promise.all([\n        fetch(`/api/invoices?limit=1000${clientId ? `&client_id=${clientId}` : ''}`),\n        fetch(`/api/receipts?limit=1000${clientId ? `&client_id=${clientId}` : ''}`),\n        fetch(`/api/credit-notes?limit=1000${clientId ? `&client_id=${clientId}` : ''}`)\n      ])\n      \n      const [invoicesData, receiptsData, creditNotesData] = await Promise.all([\n        invoicesRes.json(),\n        receiptsRes.json(),\n        creditNotesRes.json()\n      ])\n      \n      if (invoicesRes.ok && receiptsRes.ok && creditNotesRes.ok) {\n        const summary = financialUtils.calculateFinancialSummary(\n          invoicesData.data,\n          receiptsData.data,\n          creditNotesData.data.filter((cn: any) => cn.status === 'applied')\n        )\n        setFinancialSummary(summary)\n      }\n    } catch (error) {\n      console.error('Failed to fetch financial summary:', error)\n    }\n  }\n\n  const handleSearch = (value: string) => {\n    setSearchTerm(value)\n    setPage(1)\n  }\n\n  const handleStatusFilter = (value: string) => {\n    setStatusFilter(value === 'all' ? '' : value)\n    setPage(1)\n  }\n\n  const clearFilters = () => {\n    setSearchTerm('')\n    setStatusFilter('')\n    setDateFromFilter('')\n    setDateToFilter('')\n    setPage(1)\n  }\n\n  const handleTabChange = (tab: string) => {\n    setActiveTab(tab)\n    setPage(1)\n    setStatusFilter('')\n  }\n\n  const handleViewDocument = (type: string, id: string) => {\n    router.push(`/dashboard/${type}/${id}`)\n  }\n\n  const handleCreateDocument = (type: string) => {\n    router.push(`/dashboard/${type}/create`)\n  }\n\n  if (error) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"text-center text-red-600\">\n            <FileText className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n            <p>{error}</p>\n            <Button onClick={fetchFinancialData} className=\"mt-4\">\n              Try Again\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold tracking-tight\">Financial Management</h2>\n          <p className=\"text-muted-foreground\">\n            Manage invoices, receipts, and credit notes\n          </p>\n        </div>\n        {permissions.canManageFinance() && (\n          <div className=\"flex gap-2\">\n            <Button \n              onClick={() => handleCreateDocument('invoices')}\n              className=\"bg-g1-primary hover:bg-g1-primary/90\"\n            >\n              <Plus className=\"mr-2 h-4 w-4\" />\n              New Invoice\n            </Button>\n          </div>\n        )}\n      </div>\n\n      {/* Financial Summary */}\n      {activeTab === 'invoices' && (\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center gap-2\">\n                <FileText className=\"h-5 w-5 text-blue-500\" />\n                <div>\n                  <div className=\"text-2xl font-bold\">{formatCurrency(financialSummary.totalInvoiced, 'USD')}</div>\n                  <div className=\"text-sm text-muted-foreground\">Total Invoiced</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center gap-2\">\n                <TrendingUp className=\"h-5 w-5 text-green-500\" />\n                <div>\n                  <div className=\"text-2xl font-bold\">{formatCurrency(financialSummary.totalPaid, 'USD')}</div>\n                  <div className=\"text-sm text-muted-foreground\">Total Paid</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center gap-2\">\n                <TrendingDown className=\"h-5 w-5 text-red-500\" />\n                <div>\n                  <div className=\"text-2xl font-bold\">{formatCurrency(financialSummary.totalCredited, 'USD')}</div>\n                  <div className=\"text-sm text-muted-foreground\">Total Credited</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center gap-2\">\n                <DollarSign className=\"h-5 w-5 text-orange-500\" />\n                <div>\n                  <div className=\"text-2xl font-bold\">{formatCurrency(financialSummary.outstanding, 'USD')}</div>\n                  <div className=\"text-sm text-muted-foreground\">Outstanding</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Filter className=\"h-5 w-5\" />\n            Filters\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            {/* Search */}\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Search</label>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search documents...\"\n                  value={searchTerm}\n                  onChange={(e) => handleSearch(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n\n            {/* Status Filter */}\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Status</label>\n              <Select value={statusFilter || 'all'} onValueChange={handleStatusFilter}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"All statuses\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Statuses</SelectItem>\n                  {activeTab === 'invoices' && financialUtils.getAllInvoiceStatuses().map((status) => (\n                    <SelectItem key={status.value} value={status.value}>\n                      {status.label}\n                    </SelectItem>\n                  ))}\n                  {activeTab === 'credit-notes' && [\n                    { value: 'draft', label: 'Draft' },\n                    { value: 'issued', label: 'Issued' },\n                    { value: 'applied', label: 'Applied' }\n                  ].map((status) => (\n                    <SelectItem key={status.value} value={status.value}>\n                      {status.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Date Range */}\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">From Date</label>\n              <Input\n                type=\"date\"\n                value={dateFromFilter}\n                onChange={(e) => setDateFromFilter(e.target.value)}\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">To Date</label>\n              <Input\n                type=\"date\"\n                value={dateToFilter}\n                onChange={(e) => setDateToFilter(e.target.value)}\n              />\n            </div>\n          </div>\n\n          {/* Clear Filters */}\n          {(searchTerm || statusFilter || dateFromFilter || dateToFilter) && (\n            <div className=\"mt-4 pt-4 border-t\">\n              <Button variant=\"outline\" size=\"sm\" onClick={clearFilters}>\n                Clear Filters\n              </Button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Document Tabs */}\n      <Tabs value={activeTab} onValueChange={handleTabChange}>\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"invoices\">Invoices</TabsTrigger>\n          <TabsTrigger value=\"receipts\">Receipts</TabsTrigger>\n          <TabsTrigger value=\"credit-notes\">Credit Notes</TabsTrigger>\n        </TabsList>\n        \n        <TabsContent value=\"invoices\" className=\"mt-6\">\n          <Card>\n            <CardContent className=\"p-0\">\n              {loading ? (\n                <div className=\"flex items-center justify-center p-8\">\n                  <Loader2 className=\"h-8 w-8 animate-spin\" />\n                </div>\n              ) : invoices.length === 0 ? (\n                <div className=\"text-center p-8\">\n                  <FileText className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No Invoices Found</h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    No invoices match your current filters\n                  </p>\n                  {permissions.canManageFinance() && (\n                    <Button onClick={() => handleCreateDocument('invoices')} className=\"bg-g1-primary hover:bg-g1-primary/90\">\n                      <Plus className=\"mr-2 h-4 w-4\" />\n                      Create First Invoice\n                    </Button>\n                  )}\n                </div>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Invoice Number</TableHead>\n                      <TableHead>Client</TableHead>\n                      <TableHead>Amount</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Due Date</TableHead>\n                      <TableHead>Created</TableHead>\n                      <TableHead className=\"text-right\">Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {invoices.map((invoice) => (\n                      <TableRow key={invoice.id}>\n                        <TableCell className=\"font-mono font-medium\">\n                          {invoice.invoice_number}\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center gap-2\">\n                            <User className=\"h-4 w-4 text-muted-foreground\" />\n                            <span>{invoice.client?.name}</span>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"font-medium\">\n                            {formatCurrency(invoice.amount, invoice.currency)}\n                          </span>\n                        </TableCell>\n                        <TableCell>\n                          <Badge className={financialUtils.getInvoiceStatusColor(invoice.status)}>\n                            {financialUtils.getInvoiceStatusDisplayName(invoice.status)}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          {invoice.due_date ? (\n                            <div className=\"flex items-center gap-2\">\n                              <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                              <span className={financialUtils.isOverdue(invoice.due_date) ? 'text-red-600' : ''}>\n                                {formatDateTime(invoice.due_date)}\n                              </span>\n                            </div>\n                          ) : (\n                            <span className=\"text-muted-foreground\">Not set</span>\n                          )}\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"text-sm text-muted-foreground\">\n                            {formatDateTime(invoice.created_at)}\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"text-right\">\n                          <div className=\"flex items-center justify-end gap-2\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleViewDocument('invoices', invoice.id)}\n                            >\n                              <Eye className=\"h-4 w-4\" />\n                            </Button>\n                            <Button variant=\"ghost\" size=\"sm\">\n                              <Download className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n        \n        <TabsContent value=\"receipts\" className=\"mt-6\">\n          <Card>\n            <CardContent className=\"p-0\">\n              {loading ? (\n                <div className=\"flex items-center justify-center p-8\">\n                  <Loader2 className=\"h-8 w-8 animate-spin\" />\n                </div>\n              ) : receipts.length === 0 ? (\n                <div className=\"text-center p-8\">\n                  <Receipt className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No Receipts Found</h3>\n                  <p className=\"text-muted-foreground\">\n                    No payment receipts match your current filters\n                  </p>\n                </div>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Receipt Number</TableHead>\n                      <TableHead>Invoice</TableHead>\n                      <TableHead>Client</TableHead>\n                      <TableHead>Amount</TableHead>\n                      <TableHead>Payment Method</TableHead>\n                      <TableHead>Payment Date</TableHead>\n                      <TableHead className=\"text-right\">Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {receipts.map((receipt) => (\n                      <TableRow key={receipt.id}>\n                        <TableCell className=\"font-mono font-medium\">\n                          {receipt.receipt_number}\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"font-medium\">{receipt.invoice?.invoice_number}</span>\n                        </TableCell>\n                        <TableCell>\n                          <span>{receipt.client?.name}</span>\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"font-medium text-green-600\">\n                            {formatCurrency(receipt.amount, receipt.currency)}\n                          </span>\n                        </TableCell>\n                        <TableCell>\n                          <Badge variant=\"secondary\">\n                            {financialUtils.getPaymentMethodDisplayName(receipt.payment_method)}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"text-sm\">\n                            {formatDateTime(receipt.payment_date)}\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"text-right\">\n                          <Button variant=\"ghost\" size=\"sm\">\n                            <Download className=\"h-4 w-4\" />\n                          </Button>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n        \n        <TabsContent value=\"credit-notes\" className=\"mt-6\">\n          <Card>\n            <CardContent className=\"p-0\">\n              {loading ? (\n                <div className=\"flex items-center justify-center p-8\">\n                  <Loader2 className=\"h-8 w-8 animate-spin\" />\n                </div>\n              ) : creditNotes.length === 0 ? (\n                <div className=\"text-center p-8\">\n                  <Minus className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No Credit Notes Found</h3>\n                  <p className=\"text-muted-foreground\">\n                    No credit notes match your current filters\n                  </p>\n                </div>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Credit Note Number</TableHead>\n                      <TableHead>Invoice</TableHead>\n                      <TableHead>Client</TableHead>\n                      <TableHead>Amount</TableHead>\n                      <TableHead>Reason</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Created</TableHead>\n                      <TableHead className=\"text-right\">Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {creditNotes.map((creditNote) => (\n                      <TableRow key={creditNote.id}>\n                        <TableCell className=\"font-mono font-medium\">\n                          {creditNote.credit_note_number}\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"font-medium\">{creditNote.invoice?.invoice_number}</span>\n                        </TableCell>\n                        <TableCell>\n                          <span>{creditNote.client?.name}</span>\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"font-medium text-red-600\">\n                            -{formatCurrency(creditNote.amount, creditNote.currency)}\n                          </span>\n                        </TableCell>\n                        <TableCell>\n                          <Badge variant=\"secondary\">\n                            {financialUtils.getCreditNoteReasonDisplayName(creditNote.reason)}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          <Badge className={financialUtils.getCreditNoteStatusColor(creditNote.status)}>\n                            {financialUtils.getCreditNoteStatusDisplayName(creditNote.status)}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"text-sm text-muted-foreground\">\n                            {formatDateTime(creditNote.created_at)}\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"text-right\">\n                          <Button variant=\"ghost\" size=\"sm\">\n                            <Download className=\"h-4 w-4\" />\n                          </Button>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Pagination */}\n      {totalPages > 1 && (\n        <div className=\"flex items-center justify-between\">\n          <div className=\"text-sm text-muted-foreground\">\n            Showing {((page - 1) * limit) + 1} to {Math.min(page * limit, totalCount)} of {totalCount} items\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setPage(page - 1)}\n              disabled={page === 1}\n            >\n              Previous\n            </Button>\n            <div className=\"flex items-center gap-1\">\n              {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {\n                const pageNum = Math.max(1, Math.min(totalPages - 4, page - 2)) + i\n                return (\n                  <Button\n                    key={pageNum}\n                    variant={pageNum === page ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => setPage(pageNum)}\n                    className={pageNum === page ? \"bg-g1-primary hover:bg-g1-primary/90\" : \"\"}\n                  >\n                    {pageNum}\n                  </Button>\n                )\n              })}\n            </div>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setPage(page + 1)}\n              disabled={page === totalPages}\n            >\n              Next\n            </Button>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}"