'use client'\n\nimport { useState, useEffect } from 'react'\nimport { useRouter } from 'next/navigation'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Textarea } from '@/components/ui/textarea'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'\nimport { Badge } from '@/components/ui/badge'\nimport { \n  Save, \n  X, \n  Loader2, \n  FileText, \n  User, \n  AlertTriangle,\n  Minus\n} from 'lucide-react'\nimport { InvoiceWithRelations, ClientWithRelations } from '@/types'\nimport { CreditNoteFormData } from '@/lib/validations/financial'\nimport { financialUtils } from '@/lib/financial-utils'\nimport { formatCurrency, formatDateTime } from '@/lib/utils'\n\ninterface CreditNoteFormProps {\n  invoice?: InvoiceWithRelations | null\n  onSave?: () => void\n  onCancel?: () => void\n}\n\nexport function CreditNoteForm({ invoice, onSave, onCancel }: CreditNoteFormProps) {\n  const [formData, setFormData] = useState<CreditNoteFormData>({\n    invoice_id: '',\n    client_id: '',\n    amount: 0,\n    currency: 'USD',\n    reason: 'error',\n    description: '',\n    notes: '',\n    metadata: {}\n  })\n  const [invoices, setInvoices] = useState<InvoiceWithRelations[]>([])\n  const [clients, setClients] = useState<ClientWithRelations[]>([])\n  const [selectedInvoice, setSelectedInvoice] = useState<InvoiceWithRelations | null>(null)\n  const [selectedClient, setSelectedClient] = useState<ClientWithRelations | null>(null)\n  const [maxCreditAmount, setMaxCreditAmount] = useState(0)\n  const [isLoading, setIsLoading] = useState(false)\n  const [isLoadingInvoices, setIsLoadingInvoices] = useState(true)\n  const [error, setError] = useState('')\n  const [success, setSuccess] = useState('')\n  \n  const router = useRouter()\n\n  useEffect(() => {\n    if (invoice) {\n      // Pre-populate with invoice data\n      setFormData({\n        invoice_id: invoice.id,\n        client_id: invoice.client_id || '',\n        amount: 0,\n        currency: invoice.currency || 'USD',\n        reason: 'error',\n        description: '',\n        notes: '',\n        metadata: {}\n      })\n      setSelectedInvoice(invoice)\n      setSelectedClient(invoice.client || null)\n      calculateMaxCreditAmount(invoice)\n    } else {\n      fetchInvoices()\n      fetchClients()\n    }\n  }, [invoice])\n\n  const fetchInvoices = async () => {\n    setIsLoadingInvoices(true)\n    try {\n      const response = await fetch('/api/invoices?status=sent&status=paid&status=overdue&limit=100')\n      const result = await response.json()\n      \n      if (response.ok) {\n        // Only show invoices that can receive credit notes\n        const creditableInvoices = result.data.filter(\n          (inv: InvoiceWithRelations) => inv.status !== 'cancelled'\n        )\n        setInvoices(creditableInvoices)\n      }\n    } catch (error) {\n      console.error('Failed to fetch invoices:', error)\n    } finally {\n      setIsLoadingInvoices(false)\n    }\n  }\n\n  const fetchClients = async () => {\n    try {\n      const response = await fetch('/api/clients?limit=100')\n      const result = await response.json()\n      \n      if (response.ok) {\n        setClients(result.data)\n      }\n    } catch (error) {\n      console.error('Failed to fetch clients:', error)\n    }\n  }\n\n  const calculateMaxCreditAmount = async (selectedInv: InvoiceWithRelations) => {\n    try {\n      const response = await fetch(`/api/credit-notes?invoice_id=${selectedInv.id}`)\n      const result = await response.json()\n      \n      if (response.ok) {\n        const totalCredited = result.data\n          .filter((cn: any) => cn.status === 'applied')\n          .reduce((sum: number, cn: any) => sum + cn.amount, 0)\n        const maxCredit = selectedInv.amount - totalCredited\n        setMaxCreditAmount(maxCredit)\n        \n        // Set default amount to max creditable amount\n        setFormData(prev => ({ ...prev, amount: maxCredit }))\n      }\n    } catch (error) {\n      console.error('Failed to calculate max credit amount:', error)\n      setMaxCreditAmount(selectedInv.amount)\n      setFormData(prev => ({ ...prev, amount: selectedInv.amount }))\n    }\n  }\n\n  const handleInvoiceChange = (invoiceId: string) => {\n    const selectedInv = invoices.find(inv => inv.id === invoiceId)\n    if (selectedInv) {\n      setSelectedInvoice(selectedInv)\n      setSelectedClient(selectedInv.client || null)\n      setFormData(prev => ({\n        ...prev,\n        invoice_id: invoiceId,\n        client_id: selectedInv.client_id || '',\n        currency: selectedInv.currency || 'USD'\n      }))\n      calculateMaxCreditAmount(selectedInv)\n    }\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setIsLoading(true)\n    setError('')\n    setSuccess('')\n\n    try {\n      const response = await fetch('/api/credit-notes', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formData)\n      })\n\n      const result = await response.json()\n\n      if (!response.ok) {\n        throw new Error(result.error || 'Failed to create credit note')\n      }\n\n      setSuccess('Credit note created successfully!')\n      \n      if (onSave) {\n        setTimeout(() => onSave(), 1000)\n      } else {\n        setTimeout(() => {\n          router.push('/dashboard/credit-notes')\n        }, 1000)\n      }\n    } catch (error) {\n      setError(error instanceof Error ? error.message : 'An error occurred')\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const updateFormData = (field: string, value: any) => {\n    setFormData(prev => ({ ...prev, [field]: value }))\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Minus className=\"h-5 w-5\" />\n              Create Credit Note\n            </CardTitle>\n            <CardDescription>\n              Issue a credit note for an invoice adjustment or refund\n            </CardDescription>\n          </div>\n          {onCancel && (\n            <Button variant=\"ghost\" size=\"icon\" onClick={onCancel}>\n              <X className=\"h-4 w-4\" />\n            </Button>\n          )}\n        </div>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {/* Invoice Selection */}\n          {!invoice && (\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center gap-2 mb-4\">\n                <FileText className=\"h-4 w-4\" />\n                <h3 className=\"text-lg font-medium\">Invoice Information</h3>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"invoice_id\">Invoice *</Label>\n                <Select\n                  value={formData.invoice_id}\n                  onValueChange={handleInvoiceChange}\n                  disabled={isLoading || isLoadingInvoices}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select an invoice\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {invoices.map((inv) => (\n                      <SelectItem key={inv.id} value={inv.id}>\n                        <div className=\"flex items-center gap-2\">\n                          <span className=\"font-medium\">{inv.invoice_number}</span>\n                          <Badge className={financialUtils.getInvoiceStatusColor(inv.status)} size=\"sm\">\n                            {financialUtils.getInvoiceStatusDisplayName(inv.status)}\n                          </Badge>\n                          <span className=\"text-sm text-muted-foreground\">\n                            {formatCurrency(inv.amount, inv.currency)}\n                          </span>\n                        </div>\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          )}\n\n          {/* Selected Invoice Details */}\n          {selectedInvoice && (\n            <div className=\"p-4 bg-muted rounded-lg\">\n              <h4 className=\"font-medium mb-3\">Invoice Details</h4>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <span className=\"text-sm text-muted-foreground\">Invoice Number:</span>\n                  <div className=\"font-medium\">{selectedInvoice.invoice_number}</div>\n                </div>\n                <div>\n                  <span className=\"text-sm text-muted-foreground\">Client:</span>\n                  <div className=\"font-medium\">{selectedClient?.name}</div>\n                </div>\n                <div>\n                  <span className=\"text-sm text-muted-foreground\">Invoice Amount:</span>\n                  <div className=\"font-medium\">{formatCurrency(selectedInvoice.amount, selectedInvoice.currency)}</div>\n                </div>\n                <div>\n                  <span className=\"text-sm text-muted-foreground\">Max Credit Amount:</span>\n                  <div className=\"font-medium text-orange-600\">\n                    {formatCurrency(maxCreditAmount, selectedInvoice.currency)}\n                  </div>\n                </div>\n                <div>\n                  <span className=\"text-sm text-muted-foreground\">Status:</span>\n                  <Badge className={financialUtils.getInvoiceStatusColor(selectedInvoice.status)} size=\"sm\">\n                    {financialUtils.getInvoiceStatusDisplayName(selectedInvoice.status)}\n                  </Badge>\n                </div>\n                <div>\n                  <span className=\"text-sm text-muted-foreground\">Issue Date:</span>\n                  <div className=\"font-medium\">\n                    {formatDateTime(selectedInvoice.created_at)}\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Credit Note Details */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center gap-2 mb-4\">\n              <AlertTriangle className=\"h-4 w-4\" />\n              <h3 className=\"text-lg font-medium\">Credit Note Details</h3>\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"reason\">Reason *</Label>\n                <Select\n                  value={formData.reason}\n                  onValueChange={(value) => updateFormData('reason', value)}\n                  disabled={isLoading}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {financialUtils.getAllCreditNoteReasons().map((reason) => (\n                      <SelectItem key={reason.value} value={reason.value}>\n                        {reason.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"amount\">Credit Amount *</Label>\n                <Input\n                  id=\"amount\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  min=\"0.01\"\n                  max={maxCreditAmount}\n                  value={formData.amount}\n                  onChange={(e) => updateFormData('amount', parseFloat(e.target.value) || 0)}\n                  disabled={isLoading}\n                  required\n                />\n                {maxCreditAmount > 0 && (\n                  <p className=\"text-xs text-muted-foreground\">\n                    Maximum: {formatCurrency(maxCreditAmount, formData.currency)}\n                  </p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"description\">Description *</Label>\n              <Input\n                id=\"description\"\n                value={formData.description}\n                onChange={(e) => updateFormData('description', e.target.value)}\n                placeholder=\"Brief description of the credit note reason\"\n                disabled={isLoading}\n                required\n              />\n            </div>\n          </div>\n\n          {/* Notes */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"notes\">Additional Notes</Label>\n            <Textarea\n              id=\"notes\"\n              value={formData.notes}\n              onChange={(e) => updateFormData('notes', e.target.value)}\n              placeholder=\"Additional details or internal notes\"\n              rows={3}\n              disabled={isLoading}\n            />\n          </div>\n\n          {/* Credit Note Impact */}\n          {selectedInvoice && formData.amount > 0 && (\n            <div className=\"p-4 bg-yellow-50 rounded-lg\">\n              <h4 className=\"font-medium mb-2 flex items-center gap-2\">\n                <AlertTriangle className=\"h-4 w-4 text-yellow-600\" />\n                Credit Note Impact\n              </h4>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span>Original Invoice Amount:</span>\n                  <span className=\"font-medium\">{formatCurrency(selectedInvoice.amount, formData.currency)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Credit Amount:</span>\n                  <span className=\"font-medium text-red-600\">-{formatCurrency(formData.amount, formData.currency)}</span>\n                </div>\n                <div className=\"flex justify-between border-t pt-2\">\n                  <span>Effective Invoice Amount:</span>\n                  <span className=\"font-medium\">\n                    {formatCurrency(selectedInvoice.amount - formData.amount, formData.currency)}\n                  </span>\n                </div>\n                <div className=\"text-yellow-700 text-xs mt-2\">\n                  ⚠️ This credit note will reduce the effective invoice amount. Ensure this is intentional.\n                </div>\n              </div>\n            </div>\n          )}\n\n          {success && (\n            <div className=\"text-sm text-green-600 bg-green-50 p-3 rounded-md\">\n              {success}\n            </div>\n          )}\n\n          {error && (\n            <div className=\"text-sm text-red-600 bg-red-50 p-3 rounded-md\">\n              {error}\n            </div>\n          )}\n\n          <div className=\"flex justify-end gap-2\">\n            {onCancel && (\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={onCancel}\n                disabled={isLoading}\n              >\n                Cancel\n              </Button>\n            )}\n            <Button\n              type=\"submit\"\n              disabled={isLoading || !formData.invoice_id || formData.amount <= 0 || formData.amount > maxCreditAmount || !formData.description.trim()}\n              className=\"bg-g1-primary hover:bg-g1-primary/90\"\n            >\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Creating Credit Note...\n                </>\n              ) : (\n                <>\n                  <Save className=\"mr-2 h-4 w-4\" />\n                  Create Credit Note\n                </>\n              )}\n            </Button>\n          </div>\n        </form>\n      </CardContent>\n    </Card>\n  )\n}"